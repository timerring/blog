[{"id":0,"href":"/blog/posts/2024/real-computer-network/","title":"Real Computer Network","section":"Blog","content":"For the computer network, I believe that most people have learned it in the course of university or college. No matter whether you are familiar with it or not, this article will give you a different perspective of the network. It can really help you a lot.\nBasic concepts # Providers # IDC: Internet Data Center, which is the data center of the internet. It is the place where the servers are located.\nISP: Internet Service Provider, which is the internet service provider. It is the company that provides the internet service.\nMain Public Cloud Service Providers:\nAWS: Amazon Web Services, which is the cloud service of Amazon. Azure: Microsoft Cloud Service, which is the cloud service of Microsoft. Alibaba Cloud: Alibaba Cloud, which is the cloud service of Alibaba. GCP: Google Cloud Platform, which is the cloud service of Google. PCCW(Recommended): Pacific Century CyberWorks, which is the internet service provider of Hong Kong, China.(make sure it is Two-way instead of one-way) Besides, if your neighbors(the shared users of the server) are all \u0026ldquo;one-click script\u0026rdquo; masters, using serverspeeder, violent modification BBR, KCPTun multiple times more packet sending, etc. But you don\u0026rsquo;t do any optimization, then even you have a whole submarine cable, you will still be slower than them.\nWhen you buy a VPS, the bandwidth is provided by the operators which the VPS supplier purchase from the operators.\nNetwork Circuits # Public Network # International export: The international export is the last port of the internet in China when the traffic is going to the overseas. Mainly located in Beijing, Shanghai and Guangzhou. 163: AS4134. The 163 network is the backbone of the internet in China. And mainly used by China Telecom. The backbone node is started with 202.97. There is basically no performance bottleneck when accessing each other within the 163 network in China. Congestion only occurs at the international export..\n169: AS4837. The 169 network is the backbone of the internet in China. And mainly used by China Unicom. AS 9929: Also known as the former China Netcom Internet (CNCNET). The AS number of China Unicom\u0026rsquo;s A network backbone is 9929. It was built by the China Netcom, and after the merger of China Netcom and China Unicom, so the A network was available. Now the users are less and mainly aims for the government. AS9808: The AS9808 is the backbone of the internet in China. And mainly used by China Mobile. The PCCW line is currently among the lines between China and Hong Kong, China or those from China to other regions in Southeast Asia where transshipment in Hong Kong, China is required. It is the line with the best quality in China except for the pure CN2 GIA line. Educational Network / China Science and Technology Network / Private Broadband. CN2(CNCN): China telecom next carrier network, which is the backbone of the internet in China(Public network), which is more advanced than the old 163 network. The backbone node is started with 59.43. CN2GT: CN2 Global Transit, cheaper but congested, in CN2 GT product in the city → province → international export section is 163 network, the international export → overseas access point section is CN2 network, the return is the same. CN2GIA: CN2 Global Internet Access, expensive but less congested.(eg. Bandwagonhost has the most stable and cheapest CN2GIA line, but it is the key examined object of domestic.) GIA the whole network is CN2 network. Dedicated Network # IPLC: International Private Leased Circuit, which is the international dedicated line.\nBut for many service suppliers, it is just the intranet of Alibaba(深港means Alicloud shenzhen \u0026ndash; Alicloud HK), which usually purchase multiple end to end IPLC lines to connect the every data center. Then it has two pros:\nThe bandwidth in IPLC is dedicated, which is more stable than public network.(The decicated line is normally described the physical line, the most traffic in Submarine optical cable is the public network traffic and small part is the IPLC traffic.) The traffic when transiting, it will not go through the specific examination. IEPL: International Ethernet Private Line, which is the enhanced version of IPLC. It is a dedicated management bandwidth service from end to end.\nAnycast: it is a network technology that allows a single IP address to be broadcast to multiple locations. That means the IP will be the same, but the location is different.\nThis IP address is in the physical link between domestic and abroad. When users access this IP address, they will be connected to the nearest server. Just like the CDN. The cons:\nThe bandwidth is bind to the single IP address, so if it was DDOS, it is hard to deal with it. Expensive. Service Concepts # The three major operators are paid inter-network settlement, which means the traffic you consume is across the operators, they will pay the cost internally.\nQoS: Quality of Service, which is the service quality of the network. It can dynamically adjust the priority of the traffic, such as video calls(bandwidth first), online games(latency priority), etc.\nSLA: Service Level Agreement, which is the agreement between the supplier and the user. It is the service level of the supplier.\nBGP: Border Gateway Protocol, which can dynamically select the best route.(when you buy vps, you can easily find it on the supplier website) Which means the same IP in multiple operator\u0026rsquo;s network is directly connected.\nRedirect: Redirect data from one server to another. Alibaba Cloud public network transit is more common in small-scale suppliers redirect.\nPort: The port is the communication endpoint of the network. It is the port of the server.\nIP # IP database # IP Database stores IP address and physical address mapping.\nThe most used domestic IP database is IPIP. The overseas is MaxMind. Cellular Base Station # When using the cellular network, the IP address is the private IP address, and then it will be converted to the public IP address through the NAT. This situation leads to everyone using the same IP segment to access websites or apps. Generally, we refer to these relatively fixed IP segments as base station IP addresses.\nSo it is hard to locate the IP address to the specific city, which means the same IP address can be in different cities. And sometimes a series of IP is assigned to the 2~3 cities. Due to the NAT，every IP address corresponds to many users, so suspending the IP address will affect many users. Roaming: When you are roaming, the IP address will be changed. It\u0026rsquo;s mainly has three operators: mobile: roaming to the local network. If your card is in Beijing, and you go to Shanghai, then you will see the IP of Shanghai. Unicom and Telecom: roaming back to the local network. If your card is in Beijing, and you go to Shanghai, you will still see the IP of Beijing. So that accounts for the reason why you are using your card abroad, you are still blocked to visit websites. Cause you are roaming back to china and then try to access the websites. Check IP # https://ip.skk.moe/\nIP question # Why the ip is not correct?\nYou are using the phone to test? (It is the base station\u0026rsquo;s fault) What is your current operator? (If it is the secondary operator, it is the fault of the third-party export) What browser are you using? (It is the cloud acceleration\u0026rsquo;s fault) What is the third-party export?\nEvery operator will not only have their customers, but also have to obtain the network export, but the backbone networks are built by primary operators. So if the secondary operator wants to access the internet, it will have to pay the access fee to the primary operator. The primary operator avoids the competition, so it will bring up an expensive fee. But some people in the primary operator will sell them in a lower price, which is usually used by the secondary operator informally.\nIP attribution # The IP attribution identified based on your access purpose: Residential broadband, Business broadband, IDC, etc.\nNative IP # Native IP: The operator\u0026rsquo;s IP address. Broadcasting country is generally the same as registration country. Normally, it can used to unlock the hulu, netflix, etc. Because the Native IP is generally not used to the cloud computing service or have a good reputation.\nBroadcast IP: The IP address of the VPS is not the same as the location of the VPS. That means this IP is from another country / region.\nStreaming media unlock: Many streaming media platforms will restrict the specific IP access due to the copyright issues. Generally, the network operators(eg.HKT) have their own IP, which is used in commercial or Residential broadband. And the IP won\u0026rsquo;t be blocked because they are all the objective customers. Besides, the Residential broadband is hard to blocked because it is dynamic.\nProtocols # Shadowsocks: the fastest rtt.\nShadowsocksR.\nV2Ray(Vmess is the self protocol, V2Ray is the collection of protocols): more handshakes, which means slower rtt. Vmess + TLS encryption + websocket, which is more stable.\nTrojan: fix some cons of V2Ray. The core is only websocket + TLS. (TLS is the most secure which banks are using). It imitates the normal http request and works on the 443 port. If it receives the illegal request, it will provide service, or it will transit the traffic to nginx, and the nginx deal with the request. Its behavior is similar to nginx, so it is hard to detect. Meanwhile, in order to avoid the malicious detection, it will redirect the 80 port traffic to the 443, and only open the 80 and 443 port, which is similar to the normal web server.\nobfs (simple-obfs): it is a tool that can encrypt the traffic. It can be used to avoid the detection. obfs has two modes, one is HTTP, the other is TLS.\nDNS # DNS is the domain name system, which is the system that can translate the domain name to the IP address.\nNo matter how we use PPPoE to dial up or connect the optical cat through DHCP, the Internet service provider (ISP) will send you two DNS. For convenience, I call these two DNS as ISP DNS.\nIn the DNS resolution process, the user initiates a request to the recursive DNS, and the recursive DNS requests the resolution result from the authoritative DNS. In other words, the recursive DNS plays a forwarding role. The ISP\u0026rsquo;s DNS is a recursive DNS; at the same time, some individuals or Internet service providers also set up their own recursive DNS for everyone to use, which is called public DNS.\nSome famous public DNS:\nCloudflare DNS: 1.1.1.1, 1.0.0.1 Google Public DNS: 8.8.8.8, 8.8.4.4 Alidns: 223.5.5.5, 223.6.6.6 Tencent DNSPod: 119.29.29.29, 119.28.28.28 For most people, the ISP DNS provided by the operator should be the most accurate and suitable, with a short response time and the most accurate CDN resolution result.\nBut the operator often does DNS pollution, it will lead the user to their cache server or some advertising mirror website or tamper the TTL, which will lead to the DNS load less.\nBut the public DNS does not accelerate the resolution speed. Public DNS is a local DNS service provided by some enterprises, which usually provides one or more Anycast IP addresses, but actually has multiple cluster services.\nWhen users go online, the client will request the resolution from the A address in the cluster, this A address is called DNS entry; the public DNS will use the B address in the DNS cluster to compare with the IP library when judging the user\u0026rsquo;s source, this B address is called DNS exit.\nSo in the process of going online, users will get the resolution from the DNS entry, and the NS server will allocate the intelligent resolution to the DNS exit. If the DNS entry does not have the requested resolution cache, it will request the upper DNS to query, and finally request to the NS server, till then the user get the resolution result.\nHence, when the DNS entry and the DNS exit are inconsistent with the user\u0026rsquo;s actual network, it may lead to the DNS resolution result not being the optimal.\nCDN # CDN is the content delivery network, which can provide the content to the user faster and more reliable via the nearest server.\nBesides, the DNS exit is very important for CDN. The public DNS is essentially forwarding your query request to the upstream DNS; without EDNS, the authoritative DNS of the CDN will determine your operator and your location based on the request IP used by the public DNS (that is, the DNS exit), and then return the nearest node IP. In brief, CDN will return the nearest IP to the DNS exit.\nFor more information, you can refer my article A brief introduction to DNS\nProxy # Every traffic transit in public network across the countries will be examined.\nThe proxy means that the traffic is go through the proxy server.\nProxy Types # The basic proxy methods are mainly three types:\nSoftware Proxy: VPN: virtual private network which can ensure the end-to-end communication security. But nowadays, it might remains some risks. Encrypted traffic: mainly exists in the Shadowsocks, SSR, V2Ray and Trojan protocols, which usually encrypt the traffic locally and send to the transit server to forward and to the remote server to decrypt it. And the protocols should be implemented in the application layer, which means you have to used some applications to use it, such as Shadowsocks, V2Ray, Clash, Surge, etc. There still exists some issues, the application can only address the traffic which it can takes over. It(Without TUN mode) can not deal with the traffic which is on the OS layer, such as the UWP, some banks software, etc. The tun mode which can virtualize the network interface, and forced take over all the traffic. Hardware Proxy: can also called as router proxy, which is the end of whole internet. But the issue is that some router are not designed for this purpose, so the computing ability cannot meet the requirements of encryption and decryption. Gateway Proxy: it is usually implemented by the software installed on the PC, and via the CPU, it can easily complete the tasks. And you can change the nodes in the software. Ratio # The most suppliers will take all the traffic (upstream and downstream) into account.\nThe ratio between the traffic you consume and the traffic the supplier statistics.\neg. You use the 0.5x ratio node, and you consume 100G, then the supplier statistics is 50G.\nWhy there are different ratio nodes?\nThe ratio is related to the line quality and user experience. Now the supplier have two types of lines: Direct line: The line is directly connected to the public network. But the transmission effect is poor because the interconnection bandwidth between the overseas operator and the domestic operator is limited, and the domestic operator usually limits the speed of the data flow from the mainland. Transit line: Add the transit server, which means the traffic will be transit through the server, hence the traffic is cost in every transit server, so the ratio is high. But it can provide more stable and faster service. Normally, it will use some tunnel protocols to balance the traffic and improve the stability. Latency # Note: The RTT is not the speed. The RTT is just the building time of the connection. The speed will depend on the shortcomings of the whole network.\nPING # ping aims to send a ICMP request to the target host and wait for the response.\nThe program will estimate the loss rate of data packets and the round-trip delay time based on the time and the number of successful responses.\nicmp ping: the classic ping. It test the latency between the machine and the transit server. tcp ping / ​http ping: It test the latency of the data packages of corresponding protocol. Normally, it will be slower than the icmp ping. Node selection mechanism # Load balancing url-test: It normally send the request to specific url, and select the best node. fall­back SSID Strategy # Traffic diversion # The traffic diversion is the strategy that can distribute the traffic to the different server, which can speed up the access speed.\nPAC1 # Proxy auto con­fig which is a method of web proxy. It can automatically select the suitable proxy server and only affect the browser.\nIt mainly depends on the specific rules which maintained by community, such as gfwlist.\nRouter traffic diversion # For traffic diversion in the routing table, you can refer to SSR-win. There are PAC diversion rules and routing diversion. For routing diversion, you need to add a SOCKS5 proxy in the browser by yourself or use Proxifier to set up a system proxy. Similarly, the settings of V2RayN on Windows also involve routing diversion. As for SS/SSR on Android, it is based on ACL (Access Control List) diversion, and there are ACLs made by third parties. On iOS, there is rule-based diversion. Since common protocols themselves don\u0026rsquo;t stipulate how to conduct diversion, it is all achieved by the software itself.\nStrategy diversion # proxy, direct, reject\nSocks5 # Socks5 is the protocol of the Session Layer, which is lower than the HTTP protocol. Socks5 mainly focus on the data package transmission, and it is not concerned with the specific protocol and usage.\nVPN vs Socks5 # The OSI model is shown as above.\nThe Application Layer you search a query on the browser, and the browser sends it to the Presentation Layer via http.\nThe Presentation Layer translate the query to the machine language and sends it to the Session Layer.\nThe Session Layer maintains the session between the client and the server.\nThe Transport Layer defines the protocol and the port.\nThe Network Layer adds the IP address.\nThe Data Link Layer adds the MAC address.\nThe Physical Layer sends the data in bits.\nVPN is the same as virtual network interface, it will take over all the traffic. You can refer to the image below.\nSo we can find that the Socks5(without TUN mode) cannot proxy the traffic of online games, and the network commands.\nThe most VPN is used the TCP protocol, it needs to establish a connection, so it can be interupted by the reset packet. Besides, the feature of the VPN is very clear, so it is easy to be detected.\nNowadays, A new VPN called wireguard used the UDP protocol, so it cannot be interupted by normal methods. But it will be limited the speed in QoS.\nReference:\nAK‘s Tech Studio https://www.duyaoss.com/archives/1086/ https://mp.weixin.qq.com/s/2teDwwIhyZ6BYIEQ_HL1vQ https://zhuanlan.zhihu.com/p/64467370 https://doubibackup.com/6r9z6_wi-2.html https://www.duyaoss.com/archives/2741/ https://blog.revincx.icu/posts/proxy-summary/index.html https://ephen.me/2017/PublicDns_1/ "},{"id":1,"href":"/blog/posts/2024/python-generator-iterator-and-decorator/","title":"Python Generator Iterator and Decorator","section":"Blog","content":"This article will review the basic knowledge of Python, including generator, iterator, and decorator.\nCH9 Generator, Iterator, and Decorator # Generator # ls = [ i**2 for i in range(1, 1000001)] for i in ls: pass Disadvantage: Occupying a lot of memory\nUse lazy calculation Do not need to store a large amount of data at once Calculate on the fly, only calculate the value needed each time Actually always executing the next() operation until there is no value left Generator Expression # Do not need to store all data\nsum((i for i in range(101))) # Sum, inside a generator # 5050 Generator Function yield # Generate Fibonacci sequence def fib(max): n, a, b = 0, 1, 1 while n \u0026lt; max: print(a) a, b = b, a + b n = n + 1 Construct generator function, execute each time when next() is called, return when encountering yield statement, continue execution from the yield statement last returned.\nDifference:\nA normal function executes all code in the function body at once when called, returning a result (if there is a return value) and then ends. The function containing yield (i.e., the generator function) executes until yield, returns a value, and then continues execution multiple times based on needs, possibly returning new values each time, until the function is executed to completion (e.g., when reaching the end of the function or encountering a return statement). It seems like the function has memory effect. def fib(max): n, a, b = 0, 1, 1 while n \u0026lt; max: yield a a, b = b, a + b n = n + 1 fib(10) # \u0026lt;generator object fib at 0x000001BE11B19048\u0026gt; for i in fib(10): print(i) # 1 # 1 # 2 # 3 # 5 # 8 # 13 # ... Iterator # Iterable # Objects that can be directly used in for loops are collectively referred to as Iterable:\nList, tuple, string, dictionary, set, file\nUse isinstance() to determine if an object is an Iterable object\nfrom collections import Iterable isinstance([1, 2, 3], Iterable) # True Generator\nGenerators can not only be used in for loops but also be called by the next() function\nsquares = (i**2 for i in range(5)) isinstance(squares, Iterable) # True print(next(squares)) # Until there is no data to take, throw StopIteration print(next(squares)) # StopIteration: Objects that can be called by the next() function and return the next value until there is no data to take are called Iterators: Iterator\nIterator # Use isinstance() to determine if an object is an Iterator object\nGenerators are Iterators from collections import Iterator squares = (i**2 for i in range(5)) isinstance(squares, Iterator) # True List, tuple, string, dictionary, set are not Iterators isinstance([1, 2, 3], Iterator) # False Can create an Iterator by iter(Iterable) isinstance(iter([1, 2, 3]), Iterator) # True for item in Iterable is equivalent to: First get the Iterator of the Iterable by iter() function, then call next() method on the obtained Iterator to get the next value and assign it to item, and the loop ends when encountering the StopIteration exception.\nzip enumerate and other functions in itertools are Iterators x = [1, 2] y = [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;] zip(x, y) # \u0026lt;zip at 0x1be11b13c48\u0026gt; for i in zip(x, y): print(i) isinstance(zip(x, y), Iterator) # True numbers = [1, 2, 3, 4, 5] enumerate(numbers) # \u0026lt;enumerate at 0x1be11b39990\u0026gt; for i in enumerate(numbers): print(i) isinstance(enumerate(numbers), Iterator) # True File is an Iterator with open(\u0026#34;测试文件.txt\u0026#34;, \u0026#34;r\u0026#34;, encoding = \u0026#34;utf-8\u0026#34;) as f: print(isinstance(f, Iterator)) # True Iterator is consumable squares = (i**2 for i in range(3)) for square in squares: print(square) # 0 # 1 # 4 for square in squares: print(square) # Cannot iterate anymore, because it has been exhausted range() is not an Iterator Can be called range() as a lazy sequence, it is a sequence, but does not contain any content in memory, but answers questions through calculation.\nnumbers = range(10) isinstance(numbers, Iterator) # False print(len(numbers)) # Has length 10 print(numbers[0]) # Can be indexed 0 print(9 in numbers) # Can exist calculation True next(numbers) # Cannot be called by next() TypeError: \u0026#39;range\u0026#39; object is not an iterator # Will not be exhausted Decorator # Demand # (1) Need to add some features to the already developed program (2) Cannot modify the source code of the function in the program (3) Cannot change the calling method of the function in the program\nFunction Object # You can assign a function to a variable and call the variable to realize the function of the original function. Functions can be passed as parameters def square(x): return x**2 print(type(square)) # square is an instance of the function class # \u0026lt;class \u0026#39;function\u0026#39;\u0026gt; pow_2 = square # It can be understood that this function is given an alias pow 2 print(pow_2(5)) # 25 print(square(5)) # 25 High-order Function # One of the following is sufficient:\nReceives a function as a parameter Or returns a function def square(x): return x**2 def pow_2(fun): return fun f = pow_2(square) f(8) # 64 print(f == square) # True Nested Function # Define a function inside a function\ndef outer(): print(\u0026#34;outer is running\u0026#34;) def inner(): print(\u0026#34;inner is running\u0026#34;) inner() outer() Closure # def outer(): x = 1 z = 10 def inner(): y = x + 100 return y, z return inner f = outer() # In fact, f contains the inner function itself + the environment of the outer function print(f) # \u0026lt;function outer.\u0026lt;locals\u0026gt;.inner at 0x000001BE11B1D730\u0026gt; print(f.__closure__) # __closure__ property contains information from the outer function for i in f.__closure__: print(i.cell_contents) # (\u0026lt;cell at 0x000001BE0FDE06D8: int object at 0x00007FF910D59340\u0026gt;, \u0026lt;cell at 0x000001BE0FDE0A98: int object at 0x00007FF910D59460\u0026gt;) # 1 # 10 res = f() print(res) # (101, 10) Closure: Function that extends the scope\nIf a function is defined in the scope of another function and references a variable in the outer function, then this function is called a closure\nA closure is an entity composed of a function and its related reference environment (i.e., closure = function + reference environment)\nOnce a variable with the same name is redefined inside the inner function, it becomes a local variable\ndef outer(): x = 1 def inner(): x = x+100 return x return inner f = outer() f() # \u0026lt;ipython-input-87-d2da1048af8b\u0026gt; in inner() # 3 # 4 def inner(): # ----\u0026gt; 5 x = x+100 # 6 return x # UnboundLocalError: local variable \u0026#39;x\u0026#39; referenced before assignment nonlocal allows the inner function to modify the closure variable, indicating that it is not an internal variable, and uses the variable of the outer function.\ndef outer(): x = 1 def inner(): nonlocal x x = x+100 return x return inner f = outer() f() # 1 # 101 A Simple Decorator # Implemented with nested functions\nimport time def timer(func): def inner(): print(\u0026#34;inner run\u0026#34;) start = time.time() func() end = time.time() print(\u0026#34;{} function running time: {:.2f} seconds\u0026#34;.format(func.__name__, (end-start))) return inner def f1(): print(\u0026#34;f1 run\u0026#34;) time.sleep(1) f1 = timer(f1) # Contains inner() and the environment of timer, such as the passed parameter func f1() # inner run # f1 run # f1 function running time: 1.00 seconds Syntax Sugar # import time def timer(func): def inner(): print(\u0026#34;inner run\u0026#34;) start = time.time() func() end = time.time() print(\u0026#34;{} function running time: {:.2f} seconds\u0026#34;.format(func.__name__, (end-start))) return inner @timer # Equivalent to implementing f1 = timer(f1) def f1(): print(\u0026#34;f1 run\u0026#34;) time.sleep(1) Decorate Function with Parameters # import time def timer(func): def inner(*args, **kwargs): print(\u0026#34;inner run\u0026#34;) start = time.time() func(*args, **kwargs) end = time.time() print(\u0026#34;{} function running time: {:.2f} seconds\u0026#34;.format(func.__name__, (end-start))) return inner @timer # Equivalent to implementing f1 = timer(f1) def f1(n): print(\u0026#34;f1 run\u0026#34;) time.sleep(n) f1(2) Function decorated with return value\nimport time def timer(func): def inner(*args, **kwargs): print(\u0026#34;inner run\u0026#34;) start = time.time() res = func(*args, **kwargs) end = time.time() print(\u0026#34;{} function running time: {:.2f} seconds\u0026#34;.format(func.__name__, (end-start))) return res return inner @timer # Equivalent to implementing f1 = timer(f1) def f1(n): print(\u0026#34;f1 run\u0026#34;) time.sleep(n) return \u0026#34;wake up\u0026#34; res = f1(2) print(res) # inner run # f1 run # f1 function running time: 2.00 seconds # wake up Decorator with Parameters # Decorators themselves need to pass some additional parameters\nRequirement: Sometimes you need to count the absolute time, sometimes you need to count the absolute time twice def timer(method): def outer(func): def inner(*args, **kwargs): print(\u0026#34;inner run\u0026#34;) if method == \u0026#34;origin\u0026#34;: print(\u0026#34;origin_inner run\u0026#34;) start = time.time() res = func(*args, **kwargs) end = time.time() print(\u0026#34;{} function running time: {:.2f} seconds\u0026#34;.format(func.__name__, (end-start))) elif method == \u0026#34;double\u0026#34;: print(\u0026#34;double_inner run\u0026#34;) start = time.time() res = func(*args, **kwargs) end = time.time() print(\u0026#34;{} function running time: {:.2f} seconds\u0026#34;.format(func.__name__, 2*(end-start))) return res return inner return outer @timer(method=\u0026#34;origin\u0026#34;) # Equivalent to timer = timer(method = \u0026#34;origin\u0026#34;) f1 = timer(f1) def f1(): print(\u0026#34;f1 run\u0026#34;) time.sleep(1) @timer(method=\u0026#34;double\u0026#34;) def f2(): print(\u0026#34;f2 run\u0026#34;) time.sleep(1) f1() print() f2() # inner run # origin_inner run # f1 run # f1 function running time: 1.00 seconds # inner run # double_inner run # f2 run # f2 function running time: 2.00 seconds Understanding closures is key!\n9、When does the decorator execute\nExecute immediately when decorated, no need to wait for the call func_names=[] def find_function(func): print(\u0026#34;run\u0026#34;) func_names.append(func) return func @find_function def f1(): print(\u0026#34;f1 run\u0026#34;) @find_function def f2(): print(\u0026#34;f2 run\u0026#34;) # run # run for func in func_names: print(func.__name__) func() print() # f1 # f1 run # f2 # f2 run Return to the Source # The properties of the original function are hidden import time def timer(func): def inner(): print(\u0026#34;inner run\u0026#34;) start = time.time() func() end = time.time() print(\u0026#34;{} function running time: {:.2f} seconds\u0026#34;.format(func.__name__, (end-start))) return inner @timer # Equivalent to implementing f1 = timer(f1) def f1(): time.sleep(1) print(\u0026#34;f1 run\u0026#34;) print(f1.__name__) # inner Return to the source import time from functools import wraps def timer(func): @wraps(func) def inner(): print(\u0026#34;inner run\u0026#34;) start = time.time() func() end = time.time() print(\u0026#34;{} function running time: {:.2f} seconds\u0026#34;.format(func.__name__, (end-start))) return inner @timer # Equivalent to implementing f1 = timer(f1) def f1(): time.sleep(1) print(\u0026#34;f1 run\u0026#34;) print(f1.__name__) f1() # f1 # inner run # f1 run # f1 function running time: 1.00 seconds "},{"id":2,"href":"/blog/posts/2024/python-underlying-mechanism/","title":"Python Underlying Mechanism","section":"Blog","content":"This article will review the underlying mechanism of Python, including data types and derivation operations.\nCH8 Underlying Mechanism # Data Type Implementation # Strange List # list_1 = [1, [22, 33, 44], (5, 6, 7), {\u0026#34;name\u0026#34;: \u0026#34;Sarah\u0026#34;}] Shallow copy # list_3 = list_1 # Error! list_2 = list_1.copy() # Or list_1[:] \\ list(list_1) can also implement shallow copy Operations on the shallow copy of the two lists list_2[1].append(55) print(\u0026#34;list_1: \u0026#34;, list_1) # list_1: [1, [22, 33, 44, 55], (5, 6, 7), {\u0026#39;name\u0026#39;: \u0026#39;Sarah\u0026#39;}] print(\u0026#34;list_2: \u0026#34;, list_2) # list_2: [1, [22, 33, 44, 55], (5, 6, 7), {\u0026#39;name\u0026#39;: \u0026#39;Sarah\u0026#39;}] List Implementation # Concept of reference array\nThe elements inside the list can be scattered in memory\nThe list actually stores the addresses of these elements, and the addresses are stored in a continuous manner.\nShallow copy copies the addresses of the elements.\nlist_1 = [1, [22, 33, 44], (5, 6, 7), {\u0026#34;name\u0026#34;: \u0026#34;Sarah\u0026#34;}] list_2 = list(list_1) # Shallow copy The same functionality as list_1.copy() （1）New elements\nlist_1.append(100) list_2.append(\u0026#34;n\u0026#34;) print(\u0026#34;list_1: \u0026#34;, list_1) # list_1: [1, [22, 33, 44], (5, 6, 7), {\u0026#39;name\u0026#39;: \u0026#39;Sarah\u0026#39;}, 100] print(\u0026#34;list_2: \u0026#34;, list_2) # list_2: [1, [22, 33, 44], (5, 6, 7), {\u0026#39;name\u0026#39;: \u0026#39;Sarah\u0026#39;}, \u0026#39;n\u0026#39;] （2）Modify elements, pay attention to the difference between modifying mutable or immutable types.\nLists and dictionaries, which are mutable types, content changes, but the address does not change. While tuples, numbers, and strings, which are immutable types, content changes, and the address changes. list_1[0] = 10 list_2[0] = 20 print(\u0026#34;list_1: \u0026#34;, list_1) # list_1: [10, [22, 33, 44], (5, 6, 7), {\u0026#39;name\u0026#39;: \u0026#39;Sarah\u0026#39;}, 100] print(\u0026#34;list_2: \u0026#34;, list_2) # list_2: [20, [22, 33, 44], (5, 6, 7), {\u0026#39;name\u0026#39;: \u0026#39;Sarah\u0026#39;}, \u0026#39;n\u0026#39;] （3）Operations on list elements\nlist_1[1].remove(44) list_2[1] += [55, 66] print(\u0026#34;list_1: \u0026#34;, list_1) # list_1: [10, [22, 33, 55, 66], (5, 6, 7), {\u0026#39;name\u0026#39;: \u0026#39;Sarah\u0026#39;}, 100] print(\u0026#34;list_2: \u0026#34;, list_2) # list_2: [20, [22, 33, 55, 66], (5, 6, 7), {\u0026#39;name\u0026#39;: \u0026#39;Sarah\u0026#39;}, \u0026#39;n\u0026#39;] Because the operation is on the list, and the original list maps the address, after modifying the element, the address is mapped, so the modification of list1 and 2 is the same\n（4）Operations on tuple elements\nlist_2[2] += (8,9) print(\u0026#34;list_1: \u0026#34;, list_1) # list_1: [10, [22, 33, 55, 66], (5, 6, 7), {\u0026#39;name\u0026#39;: \u0026#39;Sarah\u0026#39;}, 100] print(\u0026#34;list_2: \u0026#34;, list_2) # list_2: [20, [22, 33, 55, 66], (5, 6, 7, 8, 9), {\u0026#39;name\u0026#39;: \u0026#39;Sarah\u0026#39;}, \u0026#39;n\u0026#39;] Tuples are immutable! They are equivalent to adding a tuple (5, 6, 7, 8, 9), and list2 points to this tuple.\n（5）Operations on dictionary elements\nlist_1[-2][\u0026#34;age\u0026#34;] = 18 print(\u0026#34;list_1: \u0026#34;, list_1) # list_1: [10, [22, 33, 55, 66], (5, 6, 7), {\u0026#39;name\u0026#39;: \u0026#39;Sarah\u0026#39;, \u0026#39;age\u0026#39;: 18}, 100] print(\u0026#34;list_2: \u0026#34;, list_2) # list_2: [20, [22, 33, 55, 66], (5, 6, 7, 8, 9), {\u0026#39;name\u0026#39;: \u0026#39;Sarah\u0026#39;, \u0026#39;age\u0026#39;: 18}, \u0026#39;n\u0026#39;] Deep Copy # After shallow copy\nOperations on immutable elements (numbers, strings, tuples) are effective Operations on mutable elements (lists, sets) cause some confusion Introducing deep copy\nDeep copy copies all related elements at all levels, completely separating them, clearly distinguishing between them, avoiding the above issues import copy list_1 = [1, [22, 33, 44], (5, 6, 7), {\u0026#34;name\u0026#34;: \u0026#34;Sarah\u0026#34;}] list_2 = copy.deepcopy(list_1) list_1[-1][\u0026#34;age\u0026#34;] = 18 list_2[1].append(55) print(\u0026#34;list_1: \u0026#34;, list_1) # list_1: [1, [22, 33, 44], (5, 6, 7), {\u0026#39;name\u0026#39;: \u0026#39;Sarah\u0026#39;, \u0026#39;age\u0026#39;: 18}] print(\u0026#34;list_2: \u0026#34;, list_2) # list_2: [1, [22, 33, 44, 55], (5, 6, 7), {\u0026#39;name\u0026#39;: \u0026#39;Sarah\u0026#39;}] Dictionary Implementation # Implement value storage and access through sparse arrays\nDictionary Creation Process\nCreate a sparse array (N \u0026raquo; n) d = {} Step 1: Calculate the hash value of the key through hash() print(hash(\u0026#34;python\u0026#34;)) # -4771046564460599764 print(hash((1,2))) # 3713081631934410656 # Adding a key-value pair, first calculate the hash value of the key hash(\u0026#34;age\u0026#34;) d[\u0026#34;age\u0026#34;] = 18 print(hash(\u0026#34;age\u0026#34;)) Step 2: Determine its position in the sparse array based on the calculated hash value, and if there is a hash value collision, there is a corresponding method to resolve the conflict. Step 3: Store the value at that position Summary\n（1）Dictionary data type, through space for time, implements fast data lookup, which also means that the space utilization efficiency of the dictionary is low.\n（2）Because the order of the hash value corresponding position may be different from the order of the key in the dictionary, the dictionary appears to be unordered.\nCompact String # Implement string storage through compact arrays, data is stored in memory in a continuous manner, more efficient, and saves space.\nAs a sequence type, why is the list implemented using reference arrays, while the string is implemented using compact arrays? The list can change, so it is not convenient to reserve space.\nMutable and Immutable Types # Immutable types: numbers, strings, tuples The content remains unchanged throughout its lifecycle, in other words, if it is changed, it is no longer itself (the id changes). The += operation on immutable objects actually creates a new object Tuples are not always immutable，if a tuple contains a mutable type, then the tuple can still change.\nt = (1,[2]) t[1].append(3) # (1, [2, 3]) Mutable types: lists, dictionaries, sets id remains unchanged, but the content can change The += operation on mutable objects actually modifies the original object in place A Few Examples of List Operations # Deleting a Specific Element in a List # Method 1 Existence Operation Deletion Disadvantage: Each existence operation requires traversing the list from the beginning, searching, and being inefficient\nalist = [\u0026#34;d\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;d\u0026#34; ,\u0026#34;d\u0026#34;, \u0026#34;4\u0026#34;] s = \u0026#34;d\u0026#34; while True: if s in alist: alist.remove(s) else: break print(alist) # [\u0026#39;2\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;4\u0026#39;] Method 2 Delete all elements at once First, alist is being deleted, but the index s is in order, so there may be a phenomenon where some elements are skipped, but the deletion is still performed in the order of scanning from the list head.\nalist = [\u0026#34;d\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;d\u0026#34; ,\u0026#34;d\u0026#34;, \u0026#34;4\u0026#34;] for s in alist: if s == \u0026#34;d\u0026#34;: alist.remove(s) # remove（s） Remove the first occurrence of the element in the list print(alist) # [\u0026#39;2\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;4\u0026#39;] Solution: Use negative indexing Negative indexing scans in reverse order, ensuring that each traversal is the list head, and the deletion is also the list head.\nalist = [\u0026#34;d\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;d\u0026#34; ,\u0026#34;d\u0026#34;, \u0026#34;4\u0026#34;] for i in range(-len(alist), 0): if alist[i] == \u0026#34;d\u0026#34;: alist.remove(alist[i]) # remove（s） Remove the first occurrence of the element in the list print(alist) # [\u0026#39;2\u0026#39;, \u0026#39;2\u0026#39;, \u0026#39;4\u0026#39;] Creating a Multi-Dimensional List # ls = [[0]*10]*5 ls[0][0] = 1 # [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], # [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], # [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], # [1, 0, 0, 0, 0, 0, 0, 0, 0, 0], # [1, 0, 0, 0, 0, 0, 0, 0, 0, 0]] Because the four lists below are copies of the first list, so if the first list changes, the following ones will also change.\nMore Concise Syntax # Parsing Syntax # ls = [[0]*10 for i in range(5)] ls[0][0] = 1 # [[1, 0, 0, 0, 0, 0, 0, 0, 0, 0], # [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], # [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], # [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], # [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]] List Comprehension # [expression **for value in iterable** if condition]\n# Equivalent to the following code result = [] for value in iterale: if condition: result.append(expression) squares = [i**2 for i in range(1,21) if i%2 == 1] print(squares) Support multiple variables\nx = [1, 2, 3] y = [1, 2, 3] results = [ i*j for i,j in zip(x, y)] results # [1, 4, 9] Support nested loops\ncolors = [\u0026#34;black\u0026#34;, \u0026#34;white\u0026#34;] sizes = [\u0026#34;S\u0026#34;, \u0026#34;M\u0026#34;, \u0026#34;L\u0026#34;] tshirts = [\u0026#34;{} {}\u0026#34;.format(color, size) for color in colors for size in sizes] tshirts # [\u0026#39;black S\u0026#39;, \u0026#39;black M\u0026#39;, \u0026#39;black L\u0026#39;, \u0026#39;white S\u0026#39;, \u0026#39;white M\u0026#39;, \u0026#39;white L\u0026#39;] Dictionary Comprehension # squares = {i: i**2 for i in range(3)} for k, v in squares.items(): print(k, \u0026#34;: \u0026#34;, v) # 0 : 0 # 1 : 1 # 2 : 4 Set Comprehension # squares = {i**2 for i in range(10)} squares # {0, 1, 4, 9, 16, 25, 36, 49, 64, 81} Generator Expression # squares = (i**2 for i in range(10)) squares # \u0026lt;generator object \u0026lt;genexpr\u0026gt; at 0x000001DB37A58390\u0026gt; Conditional Expression # expr1 if condition else expr2\nn = -10 if n \u0026gt;= 0: x = n else: x = -n # which is equivalent to x = n if n\u0026gt;= 0 else -n # 10 "},{"id":3,"href":"/blog/posts/2024/python-files-exceptions-and-modules/","title":"Python Files Exceptions and Modules","section":"Blog","content":"This article will review the basic knowledge of Python, including files, exceptions, and modules.\nCH7 Files, Exceptions, and Modules # File Read and Write # File Open # The general format for opening a file, recommended to use with, because if not using with, then you need to consider the close operation # The advantage of using with block: automatically close the file after execution with open(\u0026#34;file path\u0026#34;, \u0026#34;open mode\u0026#34;, encoding = \u0026#34;character encoding of the file\u0026#34;) as f: \u0026#34;file read and write operation\u0026#34; with open(\u0026#34;E:\\ipython\\test.txt\u0026#34;, \u0026#34;r\u0026#34;, encoding = \u0026#34;gbk\u0026#34;) as f: text = f.read() print(text) Open Mode # r Read mode，if the file does not exist, an error will be reported\nw Overwrite write mode，if the file does not exist, it will be created; if the file exists, it will completely overwrite the original file\nx Create write mode，if the file does not exist, it will be created; if the file exists, an error will be reported\na Append write mode，if the file does not exist, it will be created; if the file exists, it will be added to the original file\nb Binary file mode，cannot be used alone, it needs to be used together with rb, wb, ab, this mode does not need to specify encoding\nt Text file mode，default value, it needs to be used together with rt, wt, at, generally omitted, abbreviated as r, w, a\n+，with r, w, x, a, it adds read and write functions to the original functions\nThe default open mode is read mode\nCharacter Encoding # Universal code utf-8:includes all characters needed by all countries Chinese encoding gbk:used to solve the problem of Chinese encoding, in windows, if omitted, it defaults to gbk (the encoding of the region)。 For clarity, except for processing binary files, it is recommended not to omit encoding File Read # Read the entire content——f.read() with open(\u0026#34;never_gonna_give_you_up_utf.txt\u0026#34;, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: text = f.read() print(text) # with open(\u0026#34;never_gonna_give_you_up_utf.txt\u0026#34;, \u0026#34;r\u0026#34;) as f: # UnicodeDecodeError: \u0026#39;gbk\u0026#39; codec can\u0026#39;t decode byte 0x80 in position 50: illegal multibyte sequence Read line by line——f.readline() with open(\u0026#34;never_gonna_give_you_up_utf.txt\u0026#34;, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: while True: text = f.readline() # Read each line if not text: # print(text is \u0026#34;\u0026#34;) break else: # print(text == \u0026#34;\\n\u0026#34;) # The newline character is not considered empty print(text, end=\u0026#34;\u0026#34;) # Keep the original newline, so that the print() newline does not take effect, because print itself also has a newline effect Read all lines, forming a list with each line as an element f.readlines() with open(\u0026#34;never_gonna_give_you_up_utf.txt\u0026#34;, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: text = f.readlines() # Note that each line has a newline character at the end print(text) # [\u0026#39;never gonna give you up\\n\u0026#39;, \u0026#39;never gonna let you down\\n\u0026#39;, \u0026#39;never gonna run around and desert you\\n\u0026#39;, \u0026#39;never gonna make you cry\\n\u0026#39;, \u0026#39;never gonna say goodbye\\n\u0026#39;, \u0026#39;never gonna tell a lie and hurt you\\n\u0026#39;] for text in f.readlines(): print(text) # If you don\u0026#39;t want to change lines, use print(text, end=\u0026#34;\u0026#34;) Text file read summary When the file is large, read() and readlines() occupy too much memory, not recommended. readline is not convenient to use\nwith open(\u0026#34;never_gonna_give_you_up_gbk.txt\u0026#34;, \u0026#34;r\u0026#34;, encoding=\u0026#34;gbk\u0026#34;) as f: for text in f: # f itself is an iterable object, and each iteration reads one line of content print(text) Binary file Image: binary file\nwith open(\u0026#34;test.jpg\u0026#34;, \u0026#34;rb\u0026#34;) as f: print(len(f.readlines())) # 69 File Write # Write a string or byte stream (binary) to a file——f.write() with open(\u0026#34;恋曲1980.txt\u0026#34;, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: f.write(\u0026#34;你曾经对我说\\n\u0026#34;) # If the file does not exist, it will immediately create one f.write(\u0026#34;你永远爱着我\\n\u0026#34;) # If you need to change lines, add a newline character \\n at the end, and the file will be written on the second line Write a list of strings to a file——f.writelines() ls = [\u0026#34;春天刮着风\\n\u0026#34;, \u0026#34;秋天下着雨\\n\u0026#34;, \u0026#34;春风秋雨多少海誓山盟随风远去\\n\u0026#34;] with open(\u0026#34;恋曲1980.txt\u0026#34;, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: f.writelines(ls) Read and Write # r+ If the file name does not exist, an error will be reported The pointer is at the beginning, and the pointer must be moved to the end to start writing, otherwise it will overwrite the previous content with open(\u0026#34;浪淘沙_北戴河.txt\u0026#34;, \u0026#34;r+\u0026#34;, encoding=\u0026#34;gbk\u0026#34;) as f: # for line in f: # print(line) # After reading all, the pointer reaches the end f.seek(0,2) # Or you can move the pointer to the end f.seek(offset in bytes, position (0: start; 1: current position; 2: end)) text = [\u0026#34;萧瑟秋风今又是，\\n\u0026#34;, \u0026#34;换了人间。\\n\u0026#34;] f.writelines(text) w+ If the file does not exist, it will be created, and if the file exists, it will be immediately cleared. with open(\u0026#34;浪淘沙_北戴河.txt\u0026#34;, \u0026#34;w+\u0026#34;, encoding=\u0026#34;gbk\u0026#34;) as f: text = [\u0026#34;萧瑟秋风今又是，\\n\u0026#34;, \u0026#34;换了人间。\\n\u0026#34;] # Clear the original content f.writelines(text) # Write new content, pointer at the end f.seek(0,0) # Move the pointer to the start print(f.read()) # Read content ​\na+: If the file does not exist, it will be created, and if the file exists, the pointer is at the end, and new content will be added, without clearing the original content. Data Storage and Reading # Common data formats can be loaded and stored in different languages\ncsv format A character sequence separated by commas that can be opened by excel\nRead with open(\u0026#34;score.csv\u0026#34;, \u0026#34;r\u0026#34;, encoding=\u0026#34;gbk\u0026#34;) as f: ls = [] for line in f: # Read line by line ls.append(line.strip(\u0026#34;\\n\u0026#34;).split(\u0026#34;,\u0026#34;)) # Remove the newline character and split by \u0026#34;,\u0026#34; for res in ls: print(res) Write ls = [[\u0026#39;id\u0026#39;, \u0026#39;math\u0026#39;, \u0026#39;chinese\u0026#39;], [\u0026#39;1\u0026#39;, \u0026#39;100\u0026#39;, \u0026#39;98\u0026#39;], [\u0026#39;2\u0026#39;, \u0026#39;96\u0026#39;, \u0026#39;99\u0026#39;], [\u0026#39;3\u0026#39;, \u0026#39;97\u0026#39;, \u0026#39;95\u0026#39;]] with open(\u0026#34;score.csv\u0026#34;, \u0026#34;w\u0026#34;, encoding=\u0026#34;gbk\u0026#34;) as f: # encoding=\u0026#34;utf-8\u0026#34; for row in ls: # Write line by line f.write(\u0026#34;,\u0026#34;.join(row)+\u0026#34;\\n\u0026#34;) # Combine with commas, add a newline character at the end The above operations can also be completed using the csv module\n2、json format\nOften used to store dictionaries\nWrite - dump() import json scores = {\u0026#34;Petter\u0026#34;:{\u0026#34;math\u0026#34;:96 , \u0026#34;physics\u0026#34;: 98}, \u0026#34;Paul\u0026#34;:{\u0026#34;math\u0026#34;:92 , \u0026#34;physics\u0026#34;: 99}, \u0026#34;Mary\u0026#34;:{\u0026#34;math\u0026#34;:98 , \u0026#34;physics\u0026#34;: 97}} with open(\u0026#34;score.json\u0026#34;, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: # Write the entire object # indent pretty print, ensure_ascii=False display Chinese json.dump(scores, f, indent=4, ensure_ascii=False) Read - load() with open(\u0026#34;score.json\u0026#34;, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: scores = json.load(f) # Load the entire object for k,v in scores.items(): print(k,v) # Petter {\u0026#39;math\u0026#39;: 96, \u0026#39;physics\u0026#39;: 98} # Paul {\u0026#39;math\u0026#39;: 92, \u0026#39;physics\u0026#39;: 99} # Mary {\u0026#39;math\u0026#39;: 98, \u0026#39;physics\u0026#39;: 97} Exception Handling # When an exception occurs, if no pre-set processing method is provided, the program will interrupt\nCommon Exception Generation # Division by zero - ZeroDivisionError 1/0 # ZeroDivisionError: division by zero File not found - FileNotFoundError with open(\u0026#34;nobody.csv\u0026#34;) as f: pass # FileNotFoundError: [Errno 2] No such file or directory: \u0026#39;nobody.csv\u0026#39; Value error - ValueError Passing a value that is not expected by the caller, even though the value is of the correct type\ns = \u0026#34;1.3\u0026#34; n = int(s) # ValueError: invalid literal for int() with base 10: \u0026#39;1.3\u0026#39; Index error - IndexError Index out of sequence boundary\nls = [1, 2, 3] ls[5] # IndexError: list index out of range Type error - TypeError Passing an object type that does not match the requirement\n1 + \u0026#34;3\u0026#34; # TypeError: unsupported operand type(s) for +: \u0026#39;int\u0026#39; and \u0026#39;str\u0026#39; Other common exception types NameError - Using an undefined variable\nKeyError - Attempting to access a key that does not exist in a dictionary\nprint(a) # NameError: name \u0026#39;a\u0026#39; is not defined d = {} d[\u0026#34;1\u0026#34;] # KeyError: \u0026#39;1\u0026#39; Exception Handling # Improve the stability and reliability of the program\ntry except If the try block code runs smoothly, the except block is not triggered\nIf an error occurs in the try block, the except block is triggered, and the code in the except block is executed\nSingle branch\nx = 10 y = 0 try: z = x/y except ZeroDivisionError: # Generally, it is predicted what error will occur print(\u0026#34;0 cannot be divided!\u0026#34;) # 0 cannot be divided! Multiple branches ls = [] d = {\u0026#34;name\u0026#34;: \u0026#34;timerring\u0026#34;} try: y = m # ls[3] # d[\u0026#34;age\u0026#34;] except NameError: print(\u0026#34;Variable name does not exist\u0026#34;) except IndexError: print(\u0026#34;Index out of bounds\u0026#34;) except KeyError: print(\u0026#34;Key does not exist\u0026#34;) # Variable name does not exist Universal exception Exception (the ancestor of all errors) ls = [] d = {\u0026#34;name\u0026#34;: \u0026#34;timerring\u0026#34;} try: # y = m ls[3] # d[\u0026#34;age\u0026#34;] except Exception: print(\u0026#34;Error\u0026#34;) # Error Capture the value of the exception as ls = [] d = {\u0026#34;name\u0026#34;: \u0026#34;timerring\u0026#34;} # y = x try: y = m # ls[3] # d[\u0026#34;age\u0026#34;] except Exception as e: # Although it cannot obtain the specific type of error, it can obtain the reason for the error print(e) # name \u0026#39;m\u0026#39; is not defined try except else If the try module is executed, the else module is also executed, and the else module can be seen as an additional reward for the successful try. try: with open(\u0026#34;files.txt\u0026#34;) as f: text = f.read() except FileNotFoundError: print(\u0026#34;File not found\u0026#34;) else: for s in [\u0026#34;\\n\u0026#34;, \u0026#34;，\u0026#34;, \u0026#34;。\u0026#34;, \u0026#34;？\u0026#34;]: # Remove newline and punctuation characters text = text.replace(s, \u0026#34;\u0026#34;) print(\u0026#34;files consists of {} characters.\u0026#34;.format(len(text))) # files consists of 65 characters. try except finally Whether the try module is executed, finally is executed ls = [] d = {\u0026#34;name\u0026#34;: \u0026#34;timerring\u0026#34;} # y = x try: y = m # ls[3] # d[\u0026#34;age\u0026#34;] except Exception as e: # Although it cannot obtain the specific type of error, it can obtain the value of the error print(e) finally: print(\u0026#34;Whether an exception is triggered, it will be executed\u0026#34;) # name \u0026#39;m\u0026#39; is not defined # Whether an exception is triggered, it will be executed Module Introduction # Already encapsulated, no need to \u0026ldquo;invent the wheel\u0026rdquo; yourself, declare import, and use it directly.\nBroad module classification # Python built-in # Time library time Random library random Container data type collection Iterator function itertools\nThird-party library # Data analysis numpy, pandas Data visualization matplotlib Machine learning scikit-learn Deep learning Tensorflow\nCustom file # Separate py file Package contains multiple py files, needs to add an __init__.py file. Module import # Import the entire module——import module name Call method: module name.function name or class name import time start = time.time() # Call time module\u0026#39;s time() time.sleep(3) # Call time module\u0026#39;s sleep() end = time.time() print(\u0026#34;{:.2f}s\u0026#34;.format(end-start)) Import classes or functions from a module——from module import class name or function name Call method: function name or class name from itertools import product # This case can directly use the function name for use, without adding the previous module name ls = list(product(\u0026#34;AB\u0026#34;, \u0026#34;123\u0026#34;)) # Import multiple from function import fun1, fun2 fun1.f1() fun2.f2() Import all classes and functions from a module——from module import * (not recommended) Call method: function name or class name from random import * # Wildcard import all files, so you can use without adding the module name prefix print(randint(1,100)) print(random()) Module search path # Module search order:\nPriority memory loaded module Built-in module When Python starts, the interpreter will load some modules into sys.modules sys.modules variable contains a dictionary of modules loaded into the interpreter (fully and successfully imported), with the module name as the key and its location as the value import sys print(len(sys.modules)) # 738 print(\u0026#34;math\u0026#34; in sys.modules) # True print(\u0026#34;numpy\u0026#34; in sys.modules) # False for k,v in list(sys.modules.items())[:20]: print(k, \u0026#34;:\u0026#34;, v) # sys : \u0026lt;module \u0026#39;sys\u0026#39; (built-in)\u0026gt; # builtins : \u0026lt;module \u0026#39;builtins\u0026#39; (built-in)\u0026gt; # _frozen_importlib : \u0026lt;module \u0026#39;importlib._bootstrap\u0026#39; (frozen)\u0026gt; # _imp : \u0026lt;module \u0026#39;_imp\u0026#39; (built-in)\u0026gt; # _thread : \u0026lt;module \u0026#39;_thread\u0026#39; (built-in)\u0026gt; # _warnings : \u0026lt;module \u0026#39;_warnings\u0026#39; (built-in)\u0026gt; # _weakref : \u0026lt;module \u0026#39;_weakref\u0026#39; (built-in)\u0026gt; # zipimport : \u0026lt;module \u0026#39;zipimport\u0026#39; (built-in)\u0026gt; # _frozen_importlib_external : \u0026lt;module \u0026#39;importlib._bootstrap_external\u0026#39; (frozen)\u0026gt; # _io : \u0026lt;module \u0026#39;io\u0026#39; (built-in)\u0026gt; # marshal : \u0026lt;module \u0026#39;marshal\u0026#39; (built-in)\u0026gt; # nt : \u0026lt;module \u0026#39;nt\u0026#39; (built-in)\u0026gt; # winreg : \u0026lt;module \u0026#39;winreg\u0026#39; (built-in)\u0026gt; # encodings : \u0026lt;module \u0026#39;encodings\u0026#39; from \u0026#39;C:\\\\Users\\\\ibm\\\\Anaconda3\\\\lib\\\\encodings\\\\__init__.py\u0026#39;\u0026gt; # codecs : \u0026lt;module \u0026#39;codecs\u0026#39; from \u0026#39;C:\\\\Users\\\\ibm\\\\Anaconda3\\\\lib\\\\codecs.py\u0026#39;\u0026gt; # _codecs : \u0026lt;module \u0026#39;_codecs\u0026#39; (built-in)\u0026gt; # encodings.aliases : \u0026lt;module \u0026#39;encodings.aliases\u0026#39; from \u0026#39;C:\\\\Users\\\\ibm\\\\Anaconda3\\\\lib\\\\encodings\\\\aliases.py\u0026#39;\u0026gt; # encodings.utf_8 : \u0026lt;module \u0026#39;encodings.utf_8\u0026#39; from \u0026#39;C:\\\\Users\\\\ibm\\\\Anaconda3\\\\lib\\\\encodings\\\\utf_8.py\u0026#39;\u0026gt; # _signal : \u0026lt;module \u0026#39;_signal\u0026#39; (built-in)\u0026gt; # __main__ : \u0026lt;module \u0026#39;__main__\u0026#39;\u0026gt; modules in sys.path import sys sys.path # [\u0026#39;E:\\\\ipython\u0026#39;, # \u0026#39;C:\\\\Users\\\\ibm\\\\Anaconda3\\\\python37.zip\u0026#39;, # \u0026#39;C:\\\\Users\\\\ibm\\\\Anaconda3\\\\DLLs\u0026#39;, # \u0026#39;C:\\\\Users\\\\ibm\\\\Anaconda3\\\\lib\u0026#39;, # \u0026#39;C:\\\\Users\\\\ibm\\\\Anaconda3\u0026#39;, # \u0026#39;\u0026#39;, # \u0026#39;C:\\\\Users\\\\ibm\\\\AppData\\\\Roaming\\\\Python\\\\Python37\\\\site-packages\u0026#39;, # \u0026#39;C:\\\\Users\\\\ibm\\\\Anaconda3\\\\lib\\\\site-packages\u0026#39;, # \u0026#39;C:\\\\Users\\\\ibm\\\\Anaconda3\\\\lib\\\\site-packages\\\\win32\u0026#39;, # \u0026#39;C:\\\\Users\\\\ibm\\\\Anaconda3\\\\lib\\\\site-packages\\\\win32\\\\lib\u0026#39;, # \u0026#39;C:\\\\Users\\\\ibm\\\\Anaconda3\\\\lib\\\\site-packages\\\\Pythonwin\u0026#39;, # \u0026#39;C:\\\\Users\\\\ibm\\\\Anaconda3\\\\lib\\\\site-packages\\\\IPython\\\\extensions\u0026#39;, # \u0026#39;C:\\\\Users\\\\ibm\\\\.ipython\u0026#39;] The first path in sys.path is the folder where the current execution file is located If you need to import a module that is not in this folder, you need to add the module path to sys.path import sys sys.path.append(\u0026#34;C:\\\\Users\\\\ibm\\\\Desktop\u0026#34;) # Note that it is double slashes, if it is win import fun3 fun3.f3() # Import fun3 successfully 返回首页\n"},{"id":4,"href":"/blog/posts/2024/python-object-oriented-programming/","title":"Python Object Oriented Programming","section":"Blog","content":"This article will review the object-oriented programming of Python. Mainly about the class, inheritance, and polymorphism.\nCH6 Class # Introduction # Everything is an object Everything has its own attributes Everything has its own methods Class is the carrier of objects\nEach cat is an object, we can abstract the common features of a class of objects, and create a generic class.\n# Create a class class Cat(): \u0026#34;\u0026#34;\u0026#34;Simulate a cat\u0026#34;\u0026#34;\u0026#34; def __init__(self, name): \u0026#34;\u0026#34;\u0026#34;Initialize the attributes\u0026#34;\u0026#34;\u0026#34; self.name = name def jump(self): \u0026#34;\u0026#34;\u0026#34;Simulate a cat jumping\u0026#34;\u0026#34;\u0026#34; print(self.name + \u0026#34; is jumping\u0026#34;) my_cat = Cat(\u0026#34;Loser\u0026#34;) your_cat = Cat(\u0026#34;Lucky\u0026#34;) print(my_cat.name) # Loser print(your_cat.name) # Lucky # Call method my_cat.jump() # Loser is jumping your_cat.jump() # Lucky is jumping Define a class # Three elements: class name, attributes, methods\nClass naming # Camel case - the first letter of each word is capitalized Leave two blank lines before the \u0026ldquo;class\u0026rdquo; and leave two blank lines after the class Class attributes # class Car(): \u0026#34;\u0026#34;\u0026#34;Simulate a car\u0026#34;\u0026#34;\u0026#34; # def __init__(self, the parameters to be passed) def __init__(self, brand, model, year): \u0026#34;\u0026#34;\u0026#34;Initialize the attributes of the car\u0026#34;\u0026#34;\u0026#34; self.brand = brand self.model = model self.year = year self.mileage = 0 Class methods # A function defined inside a class\nclass Car(): \u0026#34;\u0026#34;\u0026#34;Simulate a car\u0026#34;\u0026#34;\u0026#34; def __init__(self, brand, model, year): \u0026#34;\u0026#34;\u0026#34;Initialize the attributes of the car\u0026#34;\u0026#34;\u0026#34; self.brand = brand self.model = model self.year = year self.mileage = 0 def get_main_information(self): # you cannot omit self \u0026#34;\u0026#34;\u0026#34;Get the main information of the car\u0026#34;\u0026#34;\u0026#34; print(\u0026#34;Brand: {} Model: {} Year: {}\u0026#34;.format(self.brand, self.model, self.year)) def get_mileage(self): \u0026#34;\u0026#34;\u0026#34;Get the mileage of the car\u0026#34;\u0026#34;\u0026#34; return \u0026#34;Mileage: {} km\u0026#34;.format(self.mileage) Create an instance # Assign the instance to an object, and pass the corresponding parameters during instantiation.\nmy_new_car = Car(\u0026#34;Audi\u0026#34;, \u0026#34;A6\u0026#34;, 2018) Access attributes # Instance name.attribute name\nprint(my_new_car.brand) # Audi print(my_new_car.model) # A6 print(my_new_car.year) # 2018 Call methods # Instance name.method name(necessary parameters)\nmy_new_car = Car(\u0026#34;Audi\u0026#34;, \u0026#34;A6\u0026#34;, 2018) my_new_car.get_main_information() # Brand: Audi Model: A6 Year: 2018 Modify attributes # Direct modification # First access, then modify\nmy_old_car.mileage = 12000 print(my_old_car.mileage) # 12000 Modify attributes through methods # class Car(): \u0026#34;\u0026#34;\u0026#34;Simulate a car\u0026#34;\u0026#34;\u0026#34; def __init__(self, brand, model, year): \u0026#34;\u0026#34;\u0026#34;Initialize the attributes of the car\u0026#34;\u0026#34;\u0026#34; self.brand = brand self.model = model self.year = year self.mileage = 0 def get_main_information(self): # self cannot be omitted \u0026#34;\u0026#34;\u0026#34;Get the main information of the car\u0026#34;\u0026#34;\u0026#34; print(\u0026#34;Brand: {} Model: {} Year: {}\u0026#34;.format(self.brand, self.model, self.year)) def set_mileage(self, distance): \u0026#34;\u0026#34;\u0026#34;Set the mileage of the car\u0026#34;\u0026#34;\u0026#34; self.mileage = distance my_old_car.set_mileage(8000) You can create an infinite number of instances\nmy_new_car = Car(\u0026#34;Audi\u0026#34;, \u0026#34;A6\u0026#34;, 2018) my_cars = [my_new_car, my_old_car] Inheritance of classes # Inheritance is the process of low-level abstraction inheriting high-level abstraction\nSimple inheritance # Parent class\nclass Car(): \u0026#34;\u0026#34;\u0026#34;Simulate a car\u0026#34;\u0026#34;\u0026#34; def __init__(self, brand, model, year): \u0026#34;\u0026#34;\u0026#34;Initialize the attributes of the car\u0026#34;\u0026#34;\u0026#34; self.brand = brand self.model = model self.year = year self.mileage = 0 def get_main_information(self): # self cannot be omitted \u0026#34;\u0026#34;\u0026#34;Get the main information of the car\u0026#34;\u0026#34;\u0026#34; print(\u0026#34;Brand: {} Model: {} Year: {}\u0026#34;.format(self.brand, self.model, self.year)) def get_mileage(self): \u0026#34;\u0026#34;\u0026#34;Get the mileage of the car\u0026#34;\u0026#34;\u0026#34; print(\u0026#34;Mileage: {} km\u0026#34;.format(self.mileage)) def set_mileage(self, distance): \u0026#34;\u0026#34;\u0026#34;Set the mileage of the car\u0026#34;\u0026#34;\u0026#34; if distance \u0026gt;= 0: self.mileage = distance else: print(\u0026#34;Mileage cannot be negative!\u0026#34;) def increment_mileage(self, distance): \u0026#34;\u0026#34;\u0026#34;Accumulate the mileage\u0026#34;\u0026#34;\u0026#34; if distance \u0026gt;= 0: self.mileage += distance else: print(\u0026#34;The added mileage cannot be negative!\u0026#34;) Subclass\nclass Subclass name (Parent class name):\nCreate an electric car class class ElectricCar(Car): \u0026#34;\u0026#34;\u0026#34;Simulate an electric car\u0026#34;\u0026#34;\u0026#34; def __init__(self, brand, model, year): \u0026#34;\u0026#34;\u0026#34;Initialize the attributes of the electric car\u0026#34;\u0026#34;\u0026#34; super().__init__(brand, model, year) # Declare the inheritance of the parent class, super is the superclass (parent class) Automatically inherit all methods from the parent class my_electric_car = ElectricCar(\u0026#34;NextWeek\u0026#34;, \u0026#34;FF91\u0026#34;, 2046) my_electric_car.get_main_information() # Brand: NextWeek Model: FF91 Year: 2046 Add attributes and methods to the subclass # class ElectricCar(Car): \u0026#34;\u0026#34;\u0026#34;Simulate an electric car\u0026#34;\u0026#34;\u0026#34; def __init__(self, brand, model, year, bettery_size):# New parameters: bettery_size \u0026#34;\u0026#34;\u0026#34;Initialize the attributes of the electric car\u0026#34;\u0026#34;\u0026#34; super().__init__(brand, model, year) # Declare the inheritance of the parent class self.bettery_size = bettery_size # Battery capacity self.electric_quantity = bettery_size # Battery remaining capacity self.electric2distance_ratio = 5 # Electric quantity distance conversion coefficient 5 km/kW.h self.remainder_range = self.electric_quantity*self.electric2distance_ratio # Remaining mileage def get_electric_quantit(self): \u0026#34;\u0026#34;\u0026#34;Get the current battery capacity\u0026#34;\u0026#34;\u0026#34; print(\u0026#34;Current battery remaining capacity: {} kW.h\u0026#34;.format(self.electric_quantity)) def set_electric_quantity(self, electric_quantity): \u0026#34;\u0026#34;\u0026#34;Set the battery remaining capacity, recalculate the mileage that can be supported\u0026#34;\u0026#34;\u0026#34; if electric_quantity \u0026gt;= 0 and electric_quantity \u0026lt;= self.bettery_size: self.electric_quantity = electric_quantity self.remainder_range = self.electric_quantity*self.electric2distance_ratio else: print(\u0026#34;The battery remaining capacity is not set in a reasonable range!\u0026#34;) def get_remainder_range(self): \u0026#34;\u0026#34;\u0026#34;Get the remaining mileage\u0026#34;\u0026#34;\u0026#34; print(\u0026#34;The current battery remaining capacity can continue driving {} km\u0026#34;.format(self.remainder_range)) my_electric_car = ElectricCar(\u0026#34;NextWeek\u0026#34;, \u0026#34;FF91\u0026#34;, 2046, 70) my_electric_car.get_electric_quantit() # Current battery remaining capacity: 70 kW.h my_electric_car.get_remainder_range() # The current battery remaining capacity can continue driving 350 km my_electric_car.set_electric_quantity(50) # Reset the battery remaining capacity my_electric_car.get_electric_quantit() # Current battery remaining capacity: 50 kW.h my_electric_car.get_remainder_range() # The current battery remaining capacity can continue driving 250 km Overwrite the parent class method - Polymorphism # First look for the method in the subclass, if not found, look for the method in the parent class. Therefore, the subclass can overwrite the parent class method.\nclass ElectricCar(Car): \u0026#34;\u0026#34;\u0026#34;Simulate an electric car\u0026#34;\u0026#34;\u0026#34; def __init__(self, brand, model, year, bettery_size): \u0026#34;\u0026#34;\u0026#34;Initialize the attributes of the electric car\u0026#34;\u0026#34;\u0026#34; super().__init__(brand, model, year) # Declare the inheritance of the parent class self.bettery_size = bettery_size # Battery capacity self.electric_quantity = bettery_size # Battery remaining capacity self.electric2distance_ratio = 5 # Electric quantity distance conversion coefficient 5 km/kW.h self.remainder_range = self.electric_quantity*self.electric2distance_ratio # Remaining mileage def get_main_information(self): # Overwrite the parent class method \u0026#34;\u0026#34;\u0026#34;Get the main information of the car\u0026#34;\u0026#34;\u0026#34; print(\u0026#34;Brand: {} Model: {} Year: {} Remaining mileage: {} km\u0026#34; .format(self.brand, self.model, self.year, self.bettery_size*self.electric2distance_ratio)) my_electric_car = ElectricCar(\u0026#34;NextWeek\u0026#34;, \u0026#34;FF91\u0026#34;, 2046, 70) my_electric_car.get_main_information() # Brand: NextWeek Model: FF91 Year: 2046 Remaining mileage: 350 km Using instances in classes # Abstract the battery as an object.\nclass Bettery(): \u0026#34;\u0026#34;\u0026#34;Simulate the battery of an electric car\u0026#34;\u0026#34;\u0026#34; def __init__(self, bettery_size = 70): self.bettery_size = bettery_size # Battery capacity self.electric_quantity = bettery_size # Battery remaining capacity self.electric2distance_ratio = 5 # Electric quantity distance conversion coefficient 5 km/kW.h self.remainder_range = self.electric_quantity*self.electric2distance_ratio # Remaining mileage def get_electric_quantit(self): \u0026#34;\u0026#34;\u0026#34;Get the current battery remaining capacity\u0026#34;\u0026#34;\u0026#34; print(\u0026#34;Current battery remaining capacity: {} kW.h\u0026#34;.format(self.electric_quantity)) def set_electric_quantity(self, electric_quantity): \u0026#34;\u0026#34;\u0026#34;Set the battery remaining capacity, recalculate the mileage that can be supported\u0026#34;\u0026#34;\u0026#34; if electric_quantity \u0026gt;= 0 and electric_quantity \u0026lt;= self.bettery_size: self.electric_quantity = electric_quantity self.remainder_range = self.electric_quantity*self.electric2distance_ratio else: print(\u0026#34;The battery remaining capacity is not set in a reasonable range!\u0026#34;) def get_remainder_range(self): \u0026#34;\u0026#34;\u0026#34;Get the remaining mileage\u0026#34;\u0026#34;\u0026#34; print(\u0026#34;The current battery remaining capacity can continue driving {} km\u0026#34;.format(self.remainder_range)) class ElectricCar(Car): \u0026#34;\u0026#34;\u0026#34;Simulate an electric car\u0026#34;\u0026#34;\u0026#34; def __init__(self, brand, model, year, bettery_size): \u0026#34;\u0026#34;\u0026#34;Initialize the attributes of the electric car\u0026#34;\u0026#34;\u0026#34; super().__init__(brand, model, year) # Declare the inheritance of the parent class self.bettery = Bettery(bettery_size) # Battery def get_main_information(self): # Overwrite the parent class method \u0026#34;\u0026#34;\u0026#34;Get the main information of the car\u0026#34;\u0026#34;\u0026#34; print(\u0026#34;Brand: {} Model: {} Year: {} Remaining mileage: {} km\u0026#34; .format(self.brand, self.model, self.year, self.bettery.bettery_size*self.bettery.electric2distance_ratio)) my_electric_car = ElectricCar(\u0026#34;NextWeek\u0026#34;, \u0026#34;FF91\u0026#34;, 2046, 70) my_electric_car.get_main_information() # Brand: NextWeek Model: FF91 Year: 2046 Remaining mileage: 350 km my_electric_car.bettery.get_electric_quantit() # Current battery remaining capacity: 70 kW.h my_electric_car.bettery.set_electric_quantity(50) # Reset the battery remaining capacity my_electric_car.bettery.get_electric_quantit() # Current battery remaining capacity: 50 kW.h my_electric_car.bettery.get_remainder_range() # The current battery remaining capacity can continue driving 250 km "},{"id":5,"href":"/blog/posts/2024/python-cheatsheet/","title":"Python Cheatsheet","section":"Blog","content":" Basic Data Types # bin(16) oct(16) hex(16)\nint(a, 2) int(b, 8) int(c, 16)\nround(a, 1)\npow(x,n)\nForward indexing - starts incrementing from 0, and a space is also a position. Backward indexing - starts decrementing from -1, and a space is also a position. variable[start🔚step]\nwhen the step is -1, which means the previous position is greater than the latter position by -1.\nString # .split(\u0026quot; \u0026quot;) \u0026quot;,\u0026quot;.join(str) .strip(the character to be removed) .replace(\u0026quot;to be replaced\u0026quot;，\u0026quot;replace\u0026quot;) .count(\u0026quot;str\u0026quot;) .upper() .lower() .title() any() all() type() isinstance(var, type) str(num) int() float() eval() List # variable[start🔚step] use + to concatenate lists use * to duplicate lists\n.append(element) .extend(list) .insert(position, element) .remove(element) default is the first element meeting the condition .pop(position) default is the last .clear() empty the list .index(element) return its index .count(element) .reverse() in-place reverse, no return value .copy() shallow copy == [:] .sort() in-place sort, no return value. list.sort(reverse = True) sorted(列表) temporary sort, original list remains unchanged. sorted(列表, reverse = True) Tuple # def f1(x): return x2, x3 # packing\na, b = f1(3) unpacking zip() packing\nDictionary # unordered key must be immutable dict[key] variable[new key] = new value del variable[key] .keys() return the list of keys .values() return the list of values .items() return the list of key-value pairs .get(key, default) get the value of the key, if the key does not exist, return the default value .update(dict) update the dictionary, if the key does not exist, add it .pop(key) delete the value of the key .clear() clear the dictionary .copy() shallow copy Set # unordered, which means the pop is invalid element must be immutable .add(element) .remove(element) .clear() .copy() S \u0026amp; T intersection S | T union S - T difference S ^ T XOR "},{"id":6,"href":"/blog/posts/2024/python-function-parameter/","title":"Python Function Parameter","section":"Blog","content":"This blog will review the function parameter of Python. Mainly about the parameter passing, Keyword and Position Parameter, Anonymous Function, and unit test with assert.\nCH5 Function # Function Parameter # Parameter Passing # Formal and Actual Parameters # Formal parameter: parameter in function definition, actually variable name Actual parameter: parameter in function call, actually variable value Position Parameter # Assign value to formal parameter according to position order Actual parameter and formal parameter must be one-to-one, one cannot be more, one cannot be less def function(x, y, z): print(x, y, z) function(1, 2, 3) # x = 1; y = 2; z = 3 Keyword Parameter # Break position limit, directly call name to pass value (formal parameter = actual parameter) def function(x, y, z): print(x, y, z) function(y=1, z=2, x=3) # x = 1; y = 2; z = 3 Position parameter can be mixed with keyword parameter, position parameter must be placed before keyword parameter function(1, z=2, y=3) Default Parameter # Assign value to formal parameter in definition stage – the common value of the parameter Default parameter must be placed after non-default parameter When calling function, the parameter can be omitted def register(name, age, sex=\u0026#34;male\u0026#34;): print(name, age, sex) register(\u0026#34;timerring\u0026#34;, 18) Default parameter should be set to immutable type (number, string, tuple) def function(ls=[]): print(id(ls)) ls.append(1) print(id(ls)) print(ls) function() # 1759752744328 # 1759752744328 # [1] function() # 1759752744328 # 1759752744328 # [1, 1] As can be seen from the above, the address of the list has not changed. Each operation is performed on the original address list, and the content has changed, so it seems to have a memory function. Because the default parameter is set to a mutable type (list).\ndef function(ls=\u0026#34;Python\u0026#34;): print(id(ls)) ls += \u0026#34;3.7\u0026#34; print(id(ls)) print(ls) function() # 1759701700656 # 1759754352240 # Python3.7 function() # 1759701700656 # 1759754353328 # Python3.7 Will not produce \u0026ldquo;memory function\u0026rdquo;, each increment to a new address\nVariable Length Parameter *args # Don\u0026rsquo;t know how many parameters will be passed *args This parameter must be placed at the end of the parameter list def foo(x, y, z, *args): print(x, y ,z) print(args) foo(1, 2, 3, 4, 5, 6) # Extra parameters, packaged and passed to args # 1 2 3 # (4, 5, 6) Unpacking actual parameters def foo(x, y, z, *args): print(x, y ,z) print(args) foo(1, 2, 3, [4, 5, 6]) # List is packaged as a tuple and assigned to args # 1 2 3 # ([4, 5, 6],) foo(1, 2, 3, *[4, 5, 6]) # * unpacks these lists, strings, tuples, or sets # 1 2 3 # (4, 5, 6) Variable Length Parameter **kwargs # def foo(x, y, z, **kwargs): print(x, y ,z) print(kwargs) foo(1, 2, 3, a=4, b=5, c=6) # Extra parameters, packaged and passed to kwargs in the form of a dictionary # 1 2 3 # {\u0026#39;a\u0026#39;: 4, \u0026#39;b\u0026#39;: 5, \u0026#39;c\u0026#39;: 6} Unpacking actual parameters def foo(x, y, z, **kwargs): print(x, y ,z) print(kwargs) foo(1, 2, 3, **{\u0026#34;a\u0026#34;: 4, \u0026#34;b\u0026#34;: 5, \u0026#34;c\u0026#34;:6}) # 1 2 3 # {\u0026#39;a\u0026#39;: 4, \u0026#39;b\u0026#39;: 5, \u0026#39;c\u0026#39;: 6} Variable Length Parameter Combination # def foo(*args, **kwargs): print(args) print(kwargs) foo(1, 2, 3, a=4, b=5, c=6) # (1, 2, 3) # {\u0026#39;a\u0026#39;: 4, \u0026#39;b\u0026#39;: 5, \u0026#39;c\u0026#39;: 6} Function Body and Variable Scope # Function body is a piece of code that will only be executed when the function is called, and the code structure is no different from other code Local variable – only defined and used within the function body Global variable – all variables defined outside are global variables, and global variables can be used directly within the function body Define global variable in function body through global def multipy(x, y): global z z = x*y return z print(multipy(2, 9)) # 18 print(z) # 18 Return Value # Single Return Value # def foo(x): return x**2 Multiple Return Values – in the form of a tuple # def foo(x): return 1, x, x**2, x**3 # Comma separated, packaged and returned print(foo(3)) # (1, 3, 9, 27) a, b , c, d = foo(3) # Unpacking assignment print(a) # 1 print(b) # 3 print(c) # 9 print(d) # 27 No return statement default is None # Suggestions # Function and parameter naming:A combination of lowercase letters and underscores. Should include a brief description of the function\u0026rsquo;s functionality, followed by the function definition def foo(): # This function is used to... pass Leave two lines before and after the function definition def f1(): pass # Leave two lines def f2(): pass Default parameter assignment does not require spaces on both sides Unit Test with assert – Assertion # assert expression Trigger exception when expression result is false assert game_over(21, 8) == False --------------------------------------------------------------------------- AssertionError Traceback (most recent call last) \u0026lt;ipython-input-42-88b651626036\u0026gt; in \u0026lt;module\u0026gt; ----\u0026gt; 4 assert game_over(21, 8) == False AssertionError: Anonymous Function # The most suitable use of anonymous functions is with key = lambda Ensemble: Function body, especially when paired with sort() sorted()\nSort sort() sorted() ls = [(93, 88), (79, 100), (86, 71), (85, 85), (76, 94)] ls.sort(key = lambda x: x[1])# Sort by the second data of each tuple ls # [(86, 71), (85, 85), (93, 88), (76, 94), (79, 100)] ls = [(93, 88), (79, 100), (86, 71), (85, 85), (76, 94)] temp = sorted(ls, key = lambda x: x[0]+x[1], reverse=True)# Get descending sort temp # [(93, 88), (79, 100), (85, 85), (76, 94), (86, 71)] max() min() ls = [(93, 88), (79, 100), (86, 71), (85, 85), (76, 94)] n = max(ls, key = lambda x: x[1]) n # (79, 100) "},{"id":7,"href":"/blog/posts/2024/python-control-structure/","title":"Python Control Structure","section":"Blog","content":"This blog will review the control structure of Python.\nCH4 Program Control Structure # Condition Test # Logical Operation # Priority of compound logical operations\nNon \u0026gt; And \u0026gt; Or print((a \u0026gt; b) and (b \u0026gt; c)) # And print((a \u0026gt; b) or (b \u0026gt; c)) # Or print(not(a \u0026gt; b)) # Not Existence Operation # Element in list/string\nBranch Structure if Statement # Simple Version # if age \u0026gt; 7: print(\u0026#34;if\u0026#34;) else: print(\u0026#34;else\u0026#34;) Multiple Branch # if age \u0026lt; 7: print(\u0026#34;7\u0026#34;) elif age \u0026lt; 13: print(\u0026#34;13\u0026#34;) elif age \u0026lt; 60: print(\u0026#34;60\u0026#34;) else: # Sometimes for clarity, it can also be written as elif age \u0026gt;= 60: print(\u0026#34;60\u0026#34;) No matter how many branches, only one branch is executed\nIteration Loop for Loop # Execution Process # Extract each element from the iterable object and perform the corresponding operation List[ ], tuple( ), set{ }, string\u0026quot; \u0026quot;\ngraduates = (\u0026#34;apple\u0026#34;, \u0026#34;google\u0026#34;, \u0026#34;timerring\u0026#34;) for graduate in graduates: print(\u0026#34;Congratulations, \u0026#34;+graduate) Dictionary\nstudents = {201901: \u0026#39;apple\u0026#39;, 201902: \u0026#39;google\u0026#39;, 201903: \u0026#39;timerring\u0026#39;} for k, v in students.items(): print(k, v) for student in students.keys(): # for student in students is equivalent to above range()\nres = [] for i in range(1, 10, 2): res.append(i ** 2) print(res) break and continue # break End whole cycle continue End this cycle for and else # If for loop is executed completely without being interrupted by break, then run else block\nproduct_scores = [89, 90, 99, 70, 67, 78, 85, 92, 77, 82] i = 0 for score in product_scores: if score \u0026lt; 75: i+=1 if i == 2: print(\u0026#34;Product sampling fails\u0026#34;) break else: print(\u0026#34;Product sampling qualified\u0026#34;) while # while and else # If while loop is executed completely without being interrupted by break, then run else block\ncount = 0 while count \u0026lt;= 2 : count += 1 print(\u0026#34;Loop\u0026#34;,count) else: print(\u0026#34;over\u0026#34;) # Loop 1 # Loop 2 # Loop 3 # over "},{"id":8,"href":"/blog/posts/2024/python-composite-data-type/","title":"Python Composite Data Type","section":"Blog","content":"This article will review the composite data type in Python, such as list, tuple, dictionary, and set.\nCH3 Composite Data Type # List # List Definition # Sequence type: Internal elements have positional relationships and can be accessed by position number List is a sequence type that can use multiple types of elements, supports element addition, deletion, query, and modification operations ls = [\u0026#34;Python\u0026#34;, 1989, True, {\u0026#34;version\u0026#34;: 3.7}] Another way to generate: list(iterable), iterable includes: string, tuple, set, range, etc. list(\u0026#34;Welcome to subscribe this column\u0026#34;) # [\u0026#39;W\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;m\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39; \u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39; \u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;r\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39; \u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;h\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39; \u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;m\u0026#39;, \u0026#39;n\u0026#39;] list((\u0026#34;I\u0026#34;, \u0026#34;am\u0026#34;, \u0026#34;a\u0026#34;, \u0026#34;student\u0026#34;)) # [\u0026#39;I\u0026#39;, \u0026#39;am\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;student\u0026#39;] list({\u0026#34;Jim\u0026#34;, \u0026#34;Green\u0026#34;}) # [\u0026#39;Green\u0026#39;, \u0026#39;Jim\u0026#39;] range(start number, end number, number interval)\nIf the start number is omitted, it defaults to 0 Must include the end number, closed on the left and open on the right The number interval is omitted, it defaults to 1 for i in range(1, 11, 2): print(i) # 1 # 3 # 5 # 7 # 9 list(range(1, 11, 2)) # [1, 3, 5, 7, 9] List Properties # List length —— len(list) List index —— Same as string cars = [\u0026#34;BYD\u0026#34;, \u0026#34;BMW\u0026#34;, \u0026#34;AUDI\u0026#34;, \u0026#34;TOYOTA\u0026#34;] print(cars[0]) # BYD List Slicing # variable name[start position:end position:slice interval]\ncars = [\u0026#34;BYD\u0026#34;, \u0026#34;BMW\u0026#34;, \u0026#34;AUDI\u0026#34;, \u0026#34;TOYOTA\u0026#34;] print(cars[:3]) # The first three elements, start position omitted, defaults to 0; slice interval omitted, defaults to 1 # [\u0026#39;BYD\u0026#39;, \u0026#39;BMW\u0026#39;, \u0026#39;AUDI\u0026#39;] print(cars[1:4:2]) # The second to fourth elements, the difference between the front and back index is 2 # [\u0026#39;BMW\u0026#39;, \u0026#39;TOYOTA\u0026#39;] print(cars[:]) # Get the entire list, end position omitted, defaults to the last # [\u0026#39;BYD\u0026#39;, \u0026#39;BMW\u0026#39;, \u0026#39;AUDI\u0026#39;, \u0026#39;TOYOTA\u0026#39;] print(cars[-4:-2]) # Get the first two elements # [\u0026#39;BYD\u0026#39;, \u0026#39;BMW\u0026#39;] Reverse slicing cars = [\u0026#34;BYD\u0026#34;, \u0026#34;BMW\u0026#34;, \u0026#34;AUDI\u0026#34;, \u0026#34;TOYOTA\u0026#34;] print(cars[:-4:-1]) # Start position omitted, defaults to -1 # [\u0026#39;TOYOTA\u0026#39;, \u0026#39;AUDI\u0026#39;, \u0026#39;BMW\u0026#39;] print(cars[::-1]) # Get the reverse list # [\u0026#39;TOYOTA\u0026#39;, \u0026#39;AUDI\u0026#39;, \u0026#39;BMW\u0026#39;, \u0026#39;BYD\u0026#39;] List Operators # Use + to concatenate lists Use * to multiply lists [0]*10 # [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] List Methods # Add Element # Add element to the end —— list.append(element) Insert element at any position —— list.insert(position number, element) Append another list to the end —— list.extend(another list) append will add the entire list as a single element to the end of the list.\nlanguages.append([\u0026#34;Ruby\u0026#34;, \u0026#34;PHP\u0026#34;]) # [\u0026#39;Python\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;C++\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;Java\u0026#39;, [\u0026#39;Ruby\u0026#39;, \u0026#39;PHP\u0026#39;]] extend will add each element in the second list to the first list.\nlanguages = [\u0026#39;Python\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;C++\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;Java\u0026#39;] languages.extend([\u0026#34;Ruby\u0026#34;, \u0026#34;PHP\u0026#34;]) # [\u0026#39;Python\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;C++\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;Java\u0026#39;, \u0026#39;Ruby\u0026#39;, \u0026#39;PHP\u0026#39;] Delete Element # Delete element at list i position —— list.pop(i) languages = [\u0026#39;Python\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;C++\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;Java\u0026#39;] languages.pop(1) # [\u0026#39;Python\u0026#39;, \u0026#39;C++\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;Java\u0026#39;] Do not write position information, default to delete the last element —— list.pop() Delete the first occurrence of the element to be deleted in the list —— list.remove(element) Find Element # The position of the first occurrence of the element to be searched in the list —— list.index(element) Modify Element # Modify element by \u0026ldquo;index first, then assign\u0026rdquo; —— list[position]=new value List Copy # languages_2 = languages Incorrect way: This only creates an alias for the list\nCorrect way —— Shallow copy\nMethod 1: list.copy()\nMethod 2: list[:] is equivalent to slicing the entire list\nList Sorting # Use list.sort() to sort the list in place, no return value, default to increasing. Decreasing order list.sort(reverse = True) Use sorted(list) to temporarily sort the list, the original list remains unchanged, and the sorted list is returned. The same decreasing order sorted(list, reverse = True) List Reversal # Use list.reverse() to reverse the list in place, no return value List Traversal # Use for loop Tuple # Tuple Expression # Treat the tuple as an \u0026ldquo;immutable list\u0026rdquo; Does not support element addition, element deletion, element modification operations, and other operations are completely consistent with list operations Common Uses of Tuple # Packing and Unpacking\nExample 1: The return value is packaged as a tuple def f1(x): return x**2, x**3 # Packing return print(f1(3)) # (9, 27) print(type(f1(3))) # \u0026lt;class \u0026#39;tuple\u0026#39;\u0026gt; a, b = f1(3) # Unpacking assignment print(a) # 9 print(b) # 27 Example 2: Use zip function to pack numbers = [201901, 201902, 201903] name = [\u0026#34;Apple\u0026#34;, \u0026#34;Google\u0026#34;, \u0026#34;Tesla\u0026#34;] list(zip(numbers, name)) # [(201901, \u0026#39;Apple\u0026#39;), (201902, \u0026#39;Google\u0026#39;), (201903, \u0026#39;Tesla\u0026#39;)] # Unpack each tuple immediately for number,name in zip(numbers,name): print(number, name) # 201901 Apple # 201902 Google # 201903 Tesla Dictionary # Dictionary Expression # Regular dictionary is unordered and can only be accessed by key Dictionary Key Requirements\nDictionary keys cannot be repeated. If they are repeated, the previous keys are overwritten.\nDictionary keys must be immutable types，if the key is mutable, the corresponding stored value cannot be found.\nImmutable types: numbers, strings, tuples. Mutable types: lists, dictionaries, sets. Once determined, they can be freely added, deleted, and modified. Therefore, these three types cannot be used as dictionary keys. Dictionary Properties # Dictionary length len() —— Number of key-value pairs Dictionary index, get the corresponding value through dictionary[key] Dictionary Operations # Add key-value pair\nvariable name[new key] = new value Delete key-value pair\ndel variable name[key to be deleted] variable name.pop(key to be deleted) variable name.popitem() Randomly delete a key-value pair and return it as a tuple Modify value\nModify the corresponding value through \u0026ldquo;index first, then assign\u0026rdquo; d.get( )\nd.get(key, default) Get the value corresponding to the key from the dictionary d, if there is no such key, return default\nExample: Count the frequency of characters in \u0026ldquo;牛奶奶找刘奶奶买牛奶\u0026rdquo;\ns = \u0026#34;牛奶奶找刘奶奶买牛奶\u0026#34; d = {} print(d) for i in s: d[i] = d.get(i, 0)+1 # If the character appears for the first time, return default 0, then add 1 to count. If there is already a key i, return the value corresponding to the key i. print(d) # {} # {\u0026#39;牛\u0026#39;: 1} # {\u0026#39;牛\u0026#39;: 1, \u0026#39;奶\u0026#39;: 1} # {\u0026#39;牛\u0026#39;: 1, \u0026#39;奶\u0026#39;: 2} # {\u0026#39;牛\u0026#39;: 1, \u0026#39;奶\u0026#39;: 2, \u0026#39;找\u0026#39;: 1} # {\u0026#39;牛\u0026#39;: 1, \u0026#39;奶\u0026#39;: 2, \u0026#39;找\u0026#39;: 1, \u0026#39;刘\u0026#39;: 1} # {\u0026#39;牛\u0026#39;: 1, \u0026#39;奶\u0026#39;: 3, \u0026#39;找\u0026#39;: 1, \u0026#39;刘\u0026#39;: 1} # {\u0026#39;牛\u0026#39;: 1, \u0026#39;奶\u0026#39;: 4, \u0026#39;找\u0026#39;: 1, \u0026#39;刘\u0026#39;: 1} # {\u0026#39;牛\u0026#39;: 1, \u0026#39;奶\u0026#39;: 4, \u0026#39;找\u0026#39;: 1, \u0026#39;刘\u0026#39;: 1, \u0026#39;买\u0026#39;: 1} # {\u0026#39;牛\u0026#39;: 2, \u0026#39;奶\u0026#39;: 4, \u0026#39;找\u0026#39;: 1, \u0026#39;刘\u0026#39;: 1, \u0026#39;买\u0026#39;: 1} # {\u0026#39;牛\u0026#39;: 2, \u0026#39;奶\u0026#39;: 5, \u0026#39;找\u0026#39;: 1, \u0026#39;刘\u0026#39;: 1, \u0026#39;买\u0026#39;: 1} d.keys( ) d.values( )\nGet all keys and values separately.\nstudents = {201901: \u0026#39;Apple\u0026#39;, 201902: \u0026#39;Google\u0026#39;, 201903: \u0026#39;Tesla\u0026#39;} print(list(students.keys())) print(list(students.values())) # [201901, 201902, 201903] # [\u0026#39;Apple\u0026#39;, \u0026#39;Google\u0026#39;, \u0026#39;Tesla\u0026#39;] d.items( )\nprint(list(students.items())) # [(201901, \u0026#39;Apple\u0026#39;), (201902, \u0026#39;Google\u0026#39;), (201903, \u0026#39;Tesla\u0026#39;)] for k, v in students.items(): # Unpack print(k, v) # 201901 Apple # 201902 Google # 201903 Tesla Set # Set Expression # A collection of unordered elements that are mutually exclusive, which can be used for deduplication Elements must be immutable types: numbers, strings, or tuples, which can be considered as the keys of dictionaries Can be considered as a dictionary without values or values as None Set Operations # S \u0026amp; T Returns a new set, including elements that are in both sets S and T S | T Returns a new set, including all elements in sets S and T S ^ T Returns a new set, including non-common elements in sets S and T S - T Returns a new set, including elements in set S but not in set T Set Methods # Add element S.add(x) Remove element S.remove(x) Set length len(S) Set traversal —— Use for loop for star in stars: print(star) "},{"id":9,"href":"/blog/posts/2024/python-basic-data-type/","title":"Python Basic Data Type","section":"Blog","content":"This article will explore data types and common methods for them in Python. The content of this review is as follows: number type, string type, boolean type and type conversion.\nCH2 Basic Data Type # 1.Number Type # Basic Type # Integer Type # Default is decimal Binary: 0b, Octal: 0o, Hexadecimal: 0x a = bin(16) # Binary b = oct(16) # Octal c = hex(16) # Hexadecimal print(a, b, c) # 0b10000 0o20 0x10 # Attention: str type Convert other base to decimal d = int(a, 2) # Binary e = int(b, 8) # Octal f = int(c, 16) # Hexadecimal print(d, e, f) # 16 16 16 Float Type # Floating point number (0.1+0.2) == 0.3 # 0.30000000000000004 # False Computer uses binary to represent floating point number\nReason: Some decimal numbers cannot be represented by binary\nBinary Decimal 0.00011001100110011001 0.09999942779541016\n0.0011001100110011 0.1999969482421875\n0.01001100110011001 0.29999542236328125\n0.01100110011001101 0.40000152587890625\n0.1 === $1*2^{-1}$ === 0.5\nUsually not affect calculation precision Can use rounding to solve: round(parameter, certain number of decimal places) a = 3*0.1 print(a) # 0.30000000000000004 b = round(a, 1) print(b) # 0.3 b == 0.3 # True Complex Type # # Capital J or lowercase j 3+4j 2+5J # When the imaginary part coefficient is 1, it needs to be explicitly written 2+1j Operations # Addition, subtraction, multiplication, division Negation - Exponentiation ** Integer quotient //: x/y floor division Modulo operation %: x/y calculate remainder Integer and floating point number operations result in floating point numbers\nThe result of division is a floating point number 8/4 = 2.0\nOperations Functions # Calculate absolute value abs() abs(3+4j) # Calculate the modulus of the complex number a+bj (a^2+b^2)=0.5 # 5.0 Power pow(x,n) is equivalent to x**n Power modulo pow(x,n,m) is equivalent to x**n % m Rounding round(x,n) n is the number of decimal places, default is no n, rounding to integer Integer quotient and modulo operation divmod(x,y) is equivalent to returning a tuple (x//y,x % y) Sequence maximum/minimum value max( ) min( ) a = [3, 2, 3, 6, 9, 4, 5] print(\u0026#34;max:\u0026#34;, max(a)) print(\u0026#34;min:\u0026#34;, min(a)) # max: 9 # min: 2 Sum sum(x) Note: sum needs to fill in a sequence data sum((1, 2, 3, 4, 5)) # 15 Use scientific calculation library math\\scipy\\numpy import math # Import library print(math.exp(1)) # Exponential operation e^x print(math.log2(2)) # Logarithmic operation print(math.sqrt(4)) # Square root operation Equivalent to 4^0.5 import numpy as np a = [1, 2, 3, 4, 5] print(np.mean(a)) # Calculate mean print(np.median(a)) # Calculate median print(np.std(a)) # Calculate standard deviation 2.String Type # String Expression # Use \u0026quot;\u0026quot; or '' to enclose any character, refer to the situation where the string contains double quotes or single quotes. If you only want to use one, you can use the escape character \\ to achieve it. # print(\u0026#34;\u0026#34;Python\u0026#34; is good\u0026#34;) # False print(\u0026#34;\\\u0026#34;Python\\\u0026#34; is good\u0026#34;) # \\ character # \u0026#34;Python\u0026#34; is good The escape character can be used to continue inputting on a new line s = \u0026#34;py\\ thon\u0026#34; print(s) # python String Properties # String Index (Single Character) # Variable name[position number]\nPositive index – starts from 0 and increases, spaces are also a position Negative index – starts from -1 and decreases Position number cannot exceed the length of the string s = \u0026#34;My name is Peppa Pig\u0026#34; print(s[0]) # M print(s[2]) # print(s[-1]) # g print(s[-3]) # P String Slicing (Multiple Characters) # Variable name[start position:end position:slice interval]\nThe slice interval defaults to 1, which can be omitted Range: front closed and back open s = \u0026#34;Python\u0026#34; print(s[0:3:1]) == print(s[0:3]) # Pyt print(s[0:3:2]) # Pt The starting position is 0, which can be omitted The end position is omitted, which means it can be taken to the last character s = \u0026#34;Python\u0026#34; print(s[0:6]) == print(s[:6]) == print(s[:]) # Python Reverse Slicing\nThe starting position is -1, which can be omitted The end position is omitted, which means it can be taken to the first character The key point is -1, which means the previous position is -1 larger than the next position s = \u0026#34;123456789\u0026#34; print(s[-1:-10:-1]) # 987654321 print(s[:-10:-1]) # 987654321 print(s[::-1]) # 987654321 String Operators # String Concatenation # String1 + String2 String Multiplication # String * n c = a+b print(c*3) print(3*c) Member Operation # Subset in full set: Any continuous slice is a subset of the original string folk_singers = \u0026#34;Peter, Paul and Mary\u0026#34; \u0026#34;Peter\u0026#34; in folk_singers # True Traverse string characters: for character in string for s in \u0026#34;Python\u0026#34;: print(s) # P # y # t # h # o # n String Processing Functions # String Length # Number of characters len(string) Character Encoding # Convert Chinese characters, English letters, numbers, special characters, etc. to computer-recognizable binary numbers\nEach single character corresponds to a unique, non-repeating binary code Python uses Unicode encoding ord(character)：Convert character to Unicode code\nprint(ord(\u0026#34;1\u0026#34;)) # 49 print(ord(\u0026#34;a\u0026#34;)) # 97 chr(Unicode code)：Convert Unicode code to character\nprint(chr(1010)) # ϲ print(chr(23456)) # 宠 String Processing Methods # Return a list, the original string remains unchanged\nString Splitting .split(\u0026quot; \u0026quot;) # languages = \u0026#34;Python C C++ Java PHP R\u0026#34; languages_list = languages.split(\u0026#34; \u0026#34;)# The parameter in the parentheses is the mark we want to split the target string print(languages_list) print(languages_list) # [\u0026#39;Python\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;C++\u0026#39;, \u0026#39;Java\u0026#39;, \u0026#39;PHP\u0026#39;, \u0026#39;R\u0026#39;] print(languages) # Python C C++ Java PHP R String Aggregation \u0026quot;,\u0026quot;.join(\u0026quot; \u0026quot;) # Iterable type, such as string, list s = \u0026#34;12345\u0026#34; s_join = \u0026#34;,\u0026#34;.join(s) # Take out each element of the iterable object, add the aggregation character between the two s_join # \u0026#39;1,2,3,4,5\u0026#39; The elements of the sequence type must be of character type # s = [1, 2, 3, 4, 5] cannot be used for aggregation s = [\u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;5\u0026#34;] \u0026#34;*\u0026#34;.join(s) # \u0026#39;1*2*3*4*5\u0026#39; Delete specific characters at both ends .strip(\u0026quot;delete character\u0026quot;) # strip searches from both sides, deletes the specified character when encountered, stops searching when a non-specified character is encountered There are also left deletion lstrip and right deletion rstrip s = \u0026#34; I have many blanks \u0026#34; print(s.strip(\u0026#34; \u0026#34;)) # Search from both sides, delete spaces after encountering the specified character, then stop # I have many blanks print(s.lstrip(\u0026#34; \u0026#34;)) # I have many blanks print(s.rstrip(\u0026#34; \u0026#34;)) # I have many blanks String Replacement .replace(\u0026quot;replaced\u0026quot;, \u0026quot;replaced with\u0026quot;) # s = \u0026#34;Python is coming\u0026#34; s1 = s.replace(\u0026#34;Python\u0026#34;,\u0026#34;Py\u0026#34;) print(s1) # Py is coming String Count .count(\u0026quot;sample string\u0026quot;) # s = \u0026#34;Python is an excellent language\u0026#34; print(\u0026#34;an:\u0026#34;, s.count(\u0026#34;an\u0026#34;)) # an: 2 String Letter Case and First Letter Capital .upper() .lower() .title() # s = \u0026#34;Python\u0026#34; print(s.upper()) # PYTHON print(s.lower()) # python print(s.title()) # Python 3.Boolean Type # Logical Operation Results # any() Data has a non-zero value is True all() Data has a zero value is False (all non-zero) print(any([False,1,0,None])) # 0 False None are all zero # True print(all([False,1,0,None])) # False Mask for numpy array # import numpy as np x = np.array([[1, 3, 2, 5, 7]]) # Define numpy array print(x \u0026gt; 3) # [[False False False True True]] x[x \u0026gt; 3] # array([5, 7]) 4.Type Identification and Type Conversion # Type Identification # type()\nage = 20 name = \u0026#34;Ada\u0026#34; print(type(age)) # \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; print(type(name)) # \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; isinstance(variable, type) Recognize inheritance\nThe variable type is a subtype of the type, then it is true, otherwise it is false print(isinstance(age, int)) # Recognize inheritance, here int is equivalent to a class # True print(isinstance(age, object)) # object is the ancestor of all classes # True String Check Methods # string.isdigit() Character is only composed of numbers string.isalpha() Character is only composed of letters string.isalnum() Character is only composed of numbers and letters Type Conversion # Number type to string str(number type) String composed of only numbers to number int() float() eval() s1 = \u0026#34;20\u0026#34; int(s1) # 20 s2 = \u0026#34;10.1\u0026#34; # int(s2) will error float(s1) # 20.0 eval(s2) # 10.1 "},{"id":10,"href":"/blog/posts/2024/python-basic-syntax-elements/","title":"Python Basic Syntax Elements","section":"Blog","content":"Sometimes you may forget about the basic of Python, so let us take a look at the summary of Python basic summary. The content of this review is as follows: data type, variable, control flow, input \u0026amp; output, PEP8 format.\nCH1 Basic Syntax Elements # 1 Data Type # Basic Type: Number, String, Boolean # Number Type\nint float complex (a+bj) String Type\nstr: use \u0026quot; \u0026quot; or ' ' Boolean Type\nbool y = 2 \u0026lt; 1 y # False Composite Type: List, Tuple, Dictionary, Set # List Type, ordered\na = [1, 2, 3, 4, 5] a[4] # 5 Tuple Type, ordered, elements are not modifiable\nb = (1, 2, 3, 4, 5) b[0] # 1 Dictionary Type, key-value mapping, unordered\nstudent = {201901: \u0026#34;john\u0026#34;, 201902: \u0026#34;howe\u0026#34;, 201903: \u0026#34;timerring\u0026#34;} student[201902] # \u0026#39;howe\u0026#39; Set Type, a collection of unique elements, unordered\ns = {\u0026#34;john\u0026#34;, \u0026#34;howe\u0026#34;, \u0026#34;timerring\u0026#34;, \u0026#34;john\u0026#34;} s # {\u0026#39;john\u0026#39;, \u0026#39;howe\u0026#39;, \u0026#39;timerring\u0026#39;} 2 Variable # Variable Naming # What can be used as variable names?\nuppercase letters, lowercase letters, numbers, underscores, and Chinese characters. strictly case-sensitive What is not allowed?\nthe first character cannot be a number there cannot be spaces in the middle of the variable name cannot be the same as the 33 Python reserved words Variable Name Definition Techniques\nunderscore (variable and function name) variable name consists of multiple words: use _ to connect multiple words age_of_students = [17, 18, 19] Camel Case (class name) variable name consists of multiple words: capitalize the first letter of each word AgeOfStudents Constant (e.g. $\\pi$, e) variable name all letters are uppercase MAX_ITERATION = 1000 Variable Assignment # x, y = 1, 2 # separated by \u0026#34;,\u0026#34; print(x, y) x, y = y, x print(x, y) 3 Control Flow # Loop (for) # res = 0 for i in [1,2,3,4,5]: res += i res # 15 Loop (while) # i = 1 res = 0 while i \u0026lt;= 5: res += i i += 1 res # 15 Branch (if) # if condition: execute statement else: execute statement 4 Input \u0026amp; Output # Data Input # External File Import\nfrom local disk, network, etc. See File, Exception, and Module. Dynamic Interactive Input\nx = input(\u0026#34;please input: \u0026#34;) type(x) # str, so the addition is string concatenation Use eval() to remove the quotes\nx = eval(input(\u0026#34;please input: \u0026#34;)) type(x) # int Data Output # Print # Each print() defaults to a newline\nprint(\u0026#34;timerring\u0026#34;) # timerring print(1) # 1 Line Break Control end= # print(123,end=\u0026#34; \u0026#34;)# also can customize the end content print(456) # 123 456 Combined Output # PI = 3.1415926 E = 2.71828 print(\u0026#34;PI = \u0026#34;, PI, \u0026#34;E = \u0026#34;, E) Formatting Output # # one-to-one correspondence print(\u0026#34;PI = {0},E = {1}\u0026#34;.format(PI, E)) # PI = 3.1415926,E = 2.71828 print(\u0026#34;PI = {0},E = {0}\u0026#34;.format(PI, E)) # PI = 3.1415926,E = 3.1415926 # default order print(\u0026#34;PI = {},E = {}\u0026#34;.format(PI, E)) # PI = 3.1415926,E = 2.71828 Decorative Output # Padding Output\nprint(\u0026#34;{0:_^20}\u0026#34;.format(PI)) # 0 is the variable PI, : is the modifier output, _ is the modifier character, ^ is centered, 20 is the output width # ____3.1415926_____ padding print(\u0026#34;{0:*\u0026lt;30}\u0026#34;.format(PI)) # \u0026lt; is left-aligned # 3.1415926********************* Thousands Separator\nprint(\u0026#34;{0:,}\u0026#34;.format(10000000)) # 10,000,000 Simplified Floating Point Output # keep 2 decimal places print(\u0026#34;{0:.2f}\u0026#34;.format(PI)) # 3.14 Output as a percentage print(\u0026#34;{0:.1%}\u0026#34;.format(0.818727)) # 81.9% Scientific Notation Output print(\u0026#34;{0:.2e}\u0026#34;.format(0.818727)) # 8.19e-01 Integer Base Conversion Output\nDecimal to Binary, Unicode, Decimal, Octal, Hexadecimal \u0026#34;Binary {0:b}, Unicode {0:c}, Decimal {0:d}, Octal {0:o}, Hexadecimal {0:x}\u0026#34;.format(450) # Binary 11100010, Unicode \\u1b6, Decimal 450, Octal 702, Hexadecimal 1c2 Summary # Formatting Output: \u0026quot;character{0:modifier}character{1:modifier}character\u0026quot;.format(v0, v1)\nModifier Output: must be strictly in order.\n5 Program Format (PEP8 Format) # Line Maximum Length # All lines are limited to a maximum of 79 characters\nIndentation # Use indentation to represent the logical relationship between statements, indentation: 4 characters Use Spaces # Add a space on both sides of the binary operator Add spaces around different priority operators x = x*2 - 1 c = (a+b) * (a-b) Use spaces after commas Avoid Using Spaces # Do not add spaces around = when specifying keyword arguments or default parameter values def fun(n=1, m=2): print(n, m) Comments # Single-line comment # comment content\nMulti-line comment \u0026quot;\u0026quot;\u0026quot;comment content, can be split into multiple lines\u0026quot;\u0026quot;\u0026quot;\n"},{"id":11,"href":"/blog/posts/2024/deploy-github-pages-with-gpg-signing/","title":"Deploy Github Pages With GPG Signing","section":"Blog","content":"I have been busy migrating my blog this week. Coincidentally, I learned that there may be cases of commit forgery on GitHub. Therefore, for security reasons, I added a GPG signature. However, when deploying Hugo, I encountered many problems regarding whether GPG signatures can also be used. Fortunately, I finally solved them.\nIf you don\u0026rsquo;t know what GPG is, you can read GPG 101.\nHow to Deploy Github Pages With Gpg Signing and Verify # There are two main ways to deploy:\nPush all source files to GitHub directly, then use the relevant action to complete the entire deployment process. Isolate the blog source files from the built files, push the source files to the private repository of GitHub each time, and then set up the relevant workflow in the private repository to push to the public static repository. To ensure greater security, I chose the second method, deploying Hugo in the workflow of GitHub Pages, and using the actions-gh-pages action. However, due to various reasons, the author of this action does not want to add the GPG signature feature. Therefore, we have to solve the problem ourselves.\nImport GPG Key # First, I found a workflow for importing GPG keys on GitHub. After reading the documentation, my own workflow is as follows:\n- name: Import GPG key # import the gpg key to the github action uses: crazy-max/ghaction-import-gpg@v6 # repository https://github.com/crazy-max/ghaction-import-gpg with: # I use the subkey to sign the commit, if you use the primary key, you can refer to his repository docs. gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }} # the secret gpg subkey passphrase: ${{ secrets.PASSPHRASE }} # the passphrase of the gpg subkey git_user_signingkey: true git_commit_gpgsign: true fingerprint: ${{ secrets.FINGERPRINT }} # the fingerprint of the public subkey you use If you only use the primary secret key of GPG, you do not need to add the fingerprint, and I generated a dedicated subkey for signing for security reasons. Therefore, you need to specify the fingerprint of the public key of the subkey. Note that the fingerprint should be entered without spaces; otherwise, it will report an error 67108933 Not implemented \u0026lt;GPG Agent\u0026gt;. I added this note to the corresponding issue.\nDon\u0026rsquo;t forget to fill in the corresponding secret variables and values in the repository.\nDeploy # Since the author does not plan to add GPG signature, we need to clone the project and modify it ourselves. Usually, the -S option is used in the commit to specify the use of GPG signature. Therefore, I found the corresponding function in the commit and added the corresponding -S option.\nNote that the modified workflow you created cannot be used directly. The author\u0026rsquo;s instructions are as follows:\nThis action and my other actions do not provide the branch execution. I add the lib/index.js for only each release commit. After releasing, I delete it.\nTherefore, we still need to publish a version ourselves. Run ./release.sh directly in the project, and publish the version you wrote. After that, you can reference your version in the workflow, and my workflow is as follows:\n- name: Deploy Web uses: timerring/actions-gh-pages@v5.0.0 # this is adjusted action from peaceiris/actions-gh-pages, you can use it directly. with: personal_token: ${{ secrets.PERSONAL_TOKEN }} # the personal token of the github action external_repository: your_username/your_repository # your target repository publish_branch: main # the branch you want to deploy publish_dir: ./public # the directory you want to deploy user_name: ${{ secrets.USER_NAME }} # the name of the github action user_email: ${{ secrets.USER_EMAIL }} # the email of the github action # ATTENTION: please add your github verified email commit_message: ${{ github.event.head_commit.message }} Note that please ensure that you add the email verified by GitHub; otherwise, the default parameter ${process.env.GITHUB_ACTOR}@users.noreply.github.com will only generate USERNAME@users.noreply.github.com, not ID+USERNAME@users.noreply.github.com. This is a historical issue with GitHub, details can be found here. However, your private key does not contain this UUID, so it cannot be verified by GPG. (Even if you add this UID to the keys, since the user email has not been verified by GitHub, it will only display unverified in the end.)\nIn short, if your GitHub account was created after July 18, 2017, then your GitHub email address is ID+USERNAME@users.noreply.github.com, not the default USERNAME@users.noreply.github.com. In this case, you need to specify the user_email parameter and fill in the email address you have verified.\nFinally, after pushing to the blogsource repository, the workflow will automatically deploy to the blog repository, and the commit will be signed with GPG and display verified!\nYou can check my result here, every commit pushed from the blogsource repository will be signed with GPG and display verified.\nAppendix # If you also need my hugo deployment method, you can directly use the action version I modified and released, repository address timerring/actions-gh-pages, refer to my complete workflow yaml, and don\u0026rsquo;t forget to fill in the corresponding secret variables and values:\nname: deploy on: push: branches: - main workflow_dispatch: jobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 ref: main - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;0.108.0\u0026#34; extended: true - name: Build Web run: hugo --minify - name: Import GPG key # import the gpg key to the github action uses: crazy-max/ghaction-import-gpg@v6 # repository https://github.com/crazy-max/ghaction-import-gpg with: # I use the subkey to sign the commit, if you use the primary key, you can refer to his repository docs. gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }} # the secret gpg subkey passphrase: ${{ secrets.PASSPHRASE }} # the passphrase of the gpg subkey git_user_signingkey: true git_commit_gpgsign: true fingerprint: ${{ secrets.FINGERPRINT }} # the fingerprint of the public subkey you use - name: Deploy Web uses: timerring/actions-gh-pages@v5.0.0 # this is adjusted action from peaceiris/actions-gh-pages, you can use it directly. with: personal_token: ${{ secrets.PERSONAL_TOKEN }} # the personal token of the github action external_repository: your_username/your_repository # your target repository publish_branch: main # the branch you want to deploy publish_dir: ./public # the directory you want to deploy user_name: ${{ secrets.USER_NAME }} # the name of the github action user_email: ${{ secrets.USER_EMAIL }} # the email of the github action # ATTENTION: please add your github verified email commit_message: ${{ github.event.head_commit.message }} "},{"id":12,"href":"/blog/posts/2024/gpg-101/","title":"GPG 101","section":"Blog","content":" GnuPG is a complete and free implementation of the OpenPGP standard as defined by RFC4880(also known as PGP). GnuPG allows you to encrypt and sign your data and communications; it features a versatile key management system, along with access modules for all kinds of public key directories. GnuPG, also known as GPG, is a command line tool with features for easy integration with other applications.\nThis article I will introduce the basic usage of GPG.\nWhat is GPG? # When it comes to GPG, you should know the PGP first. The PGP is a protocol that provides encryption and digital signature services(Pretty Good Privacy). The GPG is the implementation of the PGP protocol. PGP can support many kinds of encryption algorithms, such as AES, RSA, ECC, etc.\nAnd you can add it to your Github to make every commit to your repository is signed.\nDo not upload any message to the public key servers, it\u0026rsquo;s not secure! Do not do any operation related to public key servers! In this article, I will not mention any operation related to public key servers! The public key servers is a centralized service, and will not delete any messages even you have revoked the public key.\nSome abbreviations # Usage # A =\u0026gt; Authentication (eg. ssh) C =\u0026gt; Certify (Only the primary key have this capability) E =\u0026gt; Encrypt S =\u0026gt; Sign (eg. sign the commit) ? =\u0026gt; Unknown capability\nType # sec =\u0026gt; Secret Primary Key ssb =\u0026gt; Secret Subkey pub =\u0026gt; Public Primary Key sub =\u0026gt; Public Subkey\nFormat # armored: asc binary: pgp Fingerprint # Each key or subkey has a line of 10 groups of 4 characters. This is the SHA-1 hash of the entire key, which is 160 bits, 20 bytes, and is usually represented as 40 hexadecimal numbers. This fingerprint can be used to uniquely identify a key pair.\nKey ID # Format:\nLong: the last 16 characters of the fingerprint. Short: the last 8 characters of the fingerprint. UID # UID is the user id which contains the username, comment and email. Name (Comment) \u0026lt;Email\u0026gt;\nOne secret key can have multiple UIDs. UID is used for the whole keys not just for specific subkey. The uid can add easily, but the existing uid cannot be adjusted, only can be revoked. Validity # When import a key, it will default to [unknown]. You can check the fingerprint and the owner\u0026rsquo;s claim to verify the key.\nTrust network # Trust levels:\nultimate: Normally you should only ultimately trust your own keys. The root of the trust chain. full: Full trust the key, also contains the keys signed by this key. marginal: Trust the key, but not fully trust. If three people trust the key, then I trust it. never: Never trust the key along with the keys signed by this key. How to use it? # Installation # brew install gpg Generate Key # You have to do the following steps quickly. If the process is timeout, you will need to re-do the steps.\ngpg --full-generate-key # 1. Then select the key type, it\u0026#39;s fine by default. # 2. Then select the key expiration, I choose `3y`, because you can renew the key later, and that\u0026#39;s make sure you cn still control the key. Expired keys are only invalid for new encryption and signing. But you can still decrypt and verify the existing information, just will be marked as expired. # 3. Then enter you name(uid), I don\u0026#39;t recommend you to use your real name, you can instead of your username. # 4. Then enter your email, make sure to use the verified email in Github, it\u0026#39;s highly recommended to use the `no-reply` email provided by Github to avoid spam. # 5. Then enter the passphrase, it\u0026#39;s used to encrypt the key. # 6. After a rondom move, your key is generated. Generate subkey # It is recommended to generate a subkey for the key. And just use the primary key to sign the new subkeys. Each subkey has its own application scenario.\n# Enter the primary key interactive mode gpg --edit-key yourNameInprimaryKey(uid or keyid) gpg \u0026gt; addkey # Then the process is the same as the previous steps. This time I choose the RSA(sign only). # Btw, before generate the subkey, it will ask you to enter the passphrase of the primary key. # After the subkey is generated, don\u0026#39;t forget to save the key. gpg \u0026gt; save Genrate a revocation certificate # Imagine you forget the passphrase of the key, or you lose the control, you can use the revocation certificate to revoke the public key. If not, you will need to notify your friends that you don\u0026rsquo;t use the key anymore. That will be a big problem. Thus it is necessary to generate a revocation certificate.\ngpg --gen-revoke -ao revoke.pgp uid(or keyid) # Make choices based on your situation Then you will get a revoke.pgp file, you can use it to revoke the key.\nlist the keys # gpg --list-keys # list the public keys, you can also use `gpg -k` gpg --list-secret-keys # list the secret keys, you can also use `gpg -K` The common usage # # The most common usage! -k or -K gpg -K --with-fingerprint --with-subkey-fingerprint --keyid-format long Besides, there are some parameters that you may need to use:\n--with-fingerprint # print the fingerprint of the key --with-subkey-fingerprint # print the fingerprint of the subkey --with-sig-list # print the signature of keys Export the key # gpg -ao public-key.txt --export uid(or keyid) # export the public key # It is better to add your secure path before the secret-key, it will export to the machine directly. gpg -ao secret-key --export-secret-key primarykeyid! # export the primary secret key, remember to add the `!` to export the single key, or you will export the whole secret keys. gpg -ao sign-subkey --export-secret-subkeys subkeyid! # export the sign sub secret key.[S] gpg -ao encrypt-subkey --export-secret-subkeys encryptkeyid! # export the encrypt sub secret key.[E] Most usage # Besides, GPG private key exported as an ASCII armored version or its base64 encoding (often).\ngpg --export-secret-key --armor keyid \u0026gt; secret-key.asc Delete the key # After Export the keys, you can delete then from the machine.\ngpg --delete-secret-keys uid(or keyid) # delete the secret key gpg --delete-keys uid(or keyid) # delete the public key As we know, the keys is stored in the machine in plaintext, it will not delete the keys completely, you can use the wipe or other tools to assist. But there is still the risk of restoring the keys. If you really want to generate and delete the keys in the most secure way, you can try Tails(boum.org).\nImport the key # Strongly discourage any operation related to public key servers!\ngpg --import yourkeysfile(your secret key or others public key) # output # the `#` means the primary key is not imported, so it\u0026#39;s safe. # sec# rsa3072/keyid 2021-01-11 [SC] # ... # the `#` means the subkey is imported. # ssb # rsa3072/keyid 2021-01-11 [E] Sign and verify # # Sign # 1. generate the binary signature file gpg --sign input.txt # 2. generate the ASCII signature file gpg --clearsign input.txt # 3. generate the signature file and original file separately. gpg --armor --detach-sign input.txt # verify gpg --verify input.txt.asc input.txt Encrypt and decrypt # # encrypt # uid(or keyid) is the uid or keyid of the recipient which means you have to import the public key of the recipient in advance. gpg --encrypt --recipient uid(or keyid) input.txt --output output.txt # a simple version gpg -se -o encrypt.txt -r uid(or keyid) input.txt # decrypt gpg --decrypt encrypt.txt --output decrypt.txt Revoke # Even you have revoke the key, if there is still someone sent you message by the outdated public key, you can decrypt the message as well as the hacker can. This operation import the revocation certificate which will make the whole keys invalid. The revoked key is only invalid for new encryption and signing. But you can still decrypt and verify the existing information, but it will be marked as revoked.\nImagine the scenario, Alice\u0026rsquo;s secret key is leaked, she will send a key revocation certificate, but the distribution is not centralized, so she cannot make sure everyone has received the message. Besides, the key revocation certificate is need to be signed by the secret key of the Alice, so if the secret key is lost, she will not be able to revoke the key.\nSo once you have revoked the key, you should push the revoked public key to where you publish the key always, and notify your friends.\n# revoke the primary key # import the public key first gpg --import gpg-linus.asc # then import the revoke certificate which will make the public key invalid directly. gpg --import revoke # gpg -k to check the key is revoked. eg.[revoked: 2024-01-01] # revoke the subkey gpg --edit-key uid(or keyid) # then select the subkey you want to revoke gpg \u0026gt; list gpg \u0026gt; key 1 # 1 is the index of the subkey gpg \u0026gt; revoke gpg \u0026gt; save Config your git # Refer to Github docs and Github docs\nReference # Github docs GnuPG docs ulyc blog Ruanyifeng blog GaoWeiX blog "},{"id":13,"href":"/blog/posts/2024/housewarming-2024/","title":"Housewarming 2024","section":"Blog","content":"So after a long time, I decide to restart my blog program. In my daily development, I have a lot of thoughts and ideas, thus I will write some documents to record them. But I believe that sharing is the best way to learn. A specific example is cryptography, which means the closing source algorithm is never the safest. Only algorithms that have been vetted by the public are truly secure.\nRestart # The reason why I call it restart is that I have been using hexo for a long time, and I wrote the blogs via hexo from the time I entered the university. But there is a serious problem in hexo, which is the deploy speed is too slow. When I have a little blogs, it is not a big problem, but the number of blogs increases with time, the deploy time exceeds 2 minutes, which is unbearable for me and it is hard to check the blog before publishing. And that makes me don\u0026rsquo;t want to publish blogs again, and then I reduced the times of publishing blogs until stopped.\nAfter about 1 year, now I decide to restart it, I came across hugo by chance, and just as the documentation says:\nHugo is a static site generator written in Go, optimized for speed and designed for flexibility. With its advanced templating system and fast asset pipelines, Hugo renders a complete site in seconds, often less.\nSo I finally decide to migrated contents from hexo to hugo.\nMigration # The migration process is smooth. The content types are nearly uniform, so I just need to pay attention to the project structure. And reading the documentation, the hugo mainly contains these parts:\n. ├── archetypes # the template of creating new pages ├── assets # the static files ├── config.toml # the configuration of the blog ├── content # blogs ├── public # hugo build output ├── resources # some resources ├── static # the static files └── themes # the added themes will be here and the theme structure is similar to the main hugo The creation of the blog can be referred to the official documentation.\nThemes # The theme I choose is hugo-book, which is a theme for hugo. Simple and graceful.\nMathematics # For the mathematics, there are two ways in browser to render the formula, the Katex and MathJax. They are all open source javascript libraries. Since I knew the markdown syntax, I use the Typora which supports MathJax library. So I get used to its syntax which accounts for the reason why I choose it.\nDeployment # The deployment is done by github actions, and the workflow file is in the .github/workflows/hugo.yml. BTW, the most contents on the search engine are about the blog deployment in personal github pages, which is not suitable for me, cause the personal github pages is used to store personal homepage. Thus, I will use the private repository blogsource to store the source code and use the blog repository to host the blog.\nAbout the process, I found a toturial at random, you can refer to it. And for more infomation you can refer to the official documentation.\nThere are some key steps to note:\nMake sure the blog repository is public and the Settings -\u0026gt; Pages -\u0026gt; Build and deployment -\u0026gt; Source is set to Deploy from a branch, and the branch is main as well as /(root) is selected.\nGenerate a personal token in github and set it in the blogsource repository. This guarantees you have the permission to operate the target repository.\nSet a deploy.yml file in the .github/workflows directory of blog source code repository which is private. You can refer to this code name: deploy on: push: branches: - main workflow_dispatch: jobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 ref: main - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;0.108.0\u0026#34; # your hugo version. extended: true - name: Build Web run: hugo --minify - name: Deploy Web uses: peaceiris/actions-gh-pages@v3 with: # Make sure the name is same as what you set in the repo. PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} # Set the token in the `blog` repository. EXTERNAL_REPOSITORY: timerring/blogs # Set the target repository. PUBLISH_BRANCH: main PUBLISH_DIR: ./public # Set the publish directory. commit_message: ${{ github.event.head_commit.message }} Add the publishDir = \u0026quot;public\u0026quot; in the config.toml file and set your baseURL according to your target.\nAfter setting these, you can try to push it as normal. You will only need to push the source code to the blogsource repository, and then the blog will be deployed to the blog repository automatically through github actions.\nFonts # From the process of configurate the fonts, I have learned a lot about the fonts.\nStyle # The Style of fonts mainly contains these:\nserif: the fonts with serifs always have a small line at the end of the character. Often used in formal occasions. sans-serif: the fonts focus on simplicity and clarity. Hence it is often used in the web. monospace: the fonts with the same width for all characters. Which is often used in the code display. Weight # Different weights of fonts have different names:\n100 - Thin(Hairline) 200 - Extra Light (Ultra Light) 300 - Light 400 - Regular (Normal,Book,Roman) 500 - Medium 600 - Semi Bold (Demi Bold) 700 - Bold 800 - Extra Bold (Ultra Bold) 900 - Black (Heavy) The Regular and Bold are the most commonly used weights.\nType # The type of fonts mainly contains these:\nttf: TrueType is a font format developed by Apple and Microsoft focusing on the display in the printer in the beginning. otf: OpenType is a extension of TrueType. woff: Web Open Font Format which is a font format compressed to improve the loading speed in web. woff2: Web Open Font Format 2.0. The mostly differ in regard to the compression algorithm. For the fonts part, I have use the production of JetBrains for many years, so I choose the JetBrainsMono-Bold font for the code display.\nAnd for the content part, I use the Helvetica Neue font which is a popular sans-serif font and it is suitable for the web content.\nExtension # In conclusion, I use these extensions in the blog:\ngiscus: the comment system. mathjax: the mathematics system. Google Custom Search Engine: the search system. "},{"id":14,"href":"/blog/docs/about/","title":"About","section":"Docs","content":" About # John Howe GPG Public: 0x26FEE0805E6C9F71 Key fingerprint = B613 FBAF 0822 BEBD FABF 8F65 26FE E080 5E6C 9F71 Coffee chat # blog topic and coffee chat buy me a coffee Where to find me # RSS: source Github: timerring Mainpage: timerring Email: timerring[at]gmail.com Footprints # Changelog # 2024-12-15 Transfer from hexo to hugo. "},{"id":15,"href":"/blog/docs/friends/","title":"Friends","section":"Docs","content":" Friends links # Me "}]