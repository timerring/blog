[{"id":0,"href":"/blog/posts/2024/python-control-structure/","title":"Python Control Structure","section":"Blog","content":"This blog will review the control structure of Python.\nCH4 Program Control Structure # Condition Test # Logical Operation # Priority of compound logical operations\nNon \u0026gt; And \u0026gt; Or print((a \u0026gt; b) and (b \u0026gt; c)) # And print((a \u0026gt; b) or (b \u0026gt; c)) # Or print(not(a \u0026gt; b)) # Not Existence Operation # Element in list/string\nBranch Structure if Statement # Simple Version # if age \u0026gt; 7: print(\u0026#34;if\u0026#34;) else: print(\u0026#34;else\u0026#34;) Multiple Branch # if age \u0026lt; 7: print(\u0026#34;7\u0026#34;) elif age \u0026lt; 13: print(\u0026#34;13\u0026#34;) elif age \u0026lt; 60: print(\u0026#34;60\u0026#34;) else: # Sometimes for clarity, it can also be written as elif age \u0026gt;= 60: print(\u0026#34;60\u0026#34;) No matter how many branches, only one branch is executed\nIteration Loop for Loop # Execution Process # Extract each element from the iterable object and perform the corresponding operation List[ ], tuple( ), set{ }, string\u0026quot; \u0026quot;\ngraduates = (\u0026#34;apple\u0026#34;, \u0026#34;google\u0026#34;, \u0026#34;timerring\u0026#34;) for graduate in graduates: print(\u0026#34;Congratulations, \u0026#34;+graduate) Dictionary\nstudents = {201901: \u0026#39;apple\u0026#39;, 201902: \u0026#39;google\u0026#39;, 201903: \u0026#39;timerring\u0026#39;} for k, v in students.items(): print(k, v) for student in students.keys(): # for student in students is equivalent to above range()\nres = [] for i in range(1, 10, 2): res.append(i ** 2) print(res) break and continue # break End whole cycle continue End this cycle for and else # If for loop is executed completely without being interrupted by break, then run else block\nproduct_scores = [89, 90, 99, 70, 67, 78, 85, 92, 77, 82] i = 0 for score in product_scores: if score \u0026lt; 75: i+=1 if i == 2: print(\u0026#34;Product sampling fails\u0026#34;) break else: print(\u0026#34;Product sampling qualified\u0026#34;) while # while and else # If while loop is executed completely without being interrupted by break, then run else block\ncount = 0 while count \u0026lt;= 2 : count += 1 print(\u0026#34;Loop\u0026#34;,count) else: print(\u0026#34;over\u0026#34;) # Loop 1 # Loop 2 # Loop 3 # over "},{"id":1,"href":"/blog/posts/2024/python-composite-data-type/","title":"Python Composite Data Type","section":"Blog","content":"This article will review the composite data type in Python, such as list, tuple, dictionary, and set.\nCH3 Composite Data Type # List # List Definition # Sequence type: Internal elements have positional relationships and can be accessed by position number List is a sequence type that can use multiple types of elements, supports element addition, deletion, query, and modification operations ls = [\u0026#34;Python\u0026#34;, 1989, True, {\u0026#34;version\u0026#34;: 3.7}] Another way to generate: list(iterable), iterable includes: string, tuple, set, range, etc. list(\u0026#34;Welcome to subscribe this column\u0026#34;) # [\u0026#39;W\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;m\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39; \u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39; \u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;r\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39; \u0026#39;, \u0026#39;t\u0026#39;, \u0026#39;h\u0026#39;, \u0026#39;i\u0026#39;, \u0026#39;s\u0026#39;, \u0026#39; \u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;o\u0026#39;, \u0026#39;l\u0026#39;, \u0026#39;u\u0026#39;, \u0026#39;m\u0026#39;, \u0026#39;n\u0026#39;] list((\u0026#34;I\u0026#34;, \u0026#34;am\u0026#34;, \u0026#34;a\u0026#34;, \u0026#34;student\u0026#34;)) # [\u0026#39;I\u0026#39;, \u0026#39;am\u0026#39;, \u0026#39;a\u0026#39;, \u0026#39;student\u0026#39;] list({\u0026#34;Jim\u0026#34;, \u0026#34;Green\u0026#34;}) # [\u0026#39;Green\u0026#39;, \u0026#39;Jim\u0026#39;] range(start number, end number, number interval)\nIf the start number is omitted, it defaults to 0 Must include the end number, closed on the left and open on the right The number interval is omitted, it defaults to 1 for i in range(1, 11, 2): print(i) # 1 # 3 # 5 # 7 # 9 list(range(1, 11, 2)) # [1, 3, 5, 7, 9] List Properties # List length —— len(list) List index —— Same as string cars = [\u0026#34;BYD\u0026#34;, \u0026#34;BMW\u0026#34;, \u0026#34;AUDI\u0026#34;, \u0026#34;TOYOTA\u0026#34;] print(cars[0]) # BYD List Slicing # variable name[start position:end position:slice interval]\ncars = [\u0026#34;BYD\u0026#34;, \u0026#34;BMW\u0026#34;, \u0026#34;AUDI\u0026#34;, \u0026#34;TOYOTA\u0026#34;] print(cars[:3]) # The first three elements, start position omitted, defaults to 0; slice interval omitted, defaults to 1 # [\u0026#39;BYD\u0026#39;, \u0026#39;BMW\u0026#39;, \u0026#39;AUDI\u0026#39;] print(cars[1:4:2]) # The second to fourth elements, the difference between the front and back index is 2 # [\u0026#39;BMW\u0026#39;, \u0026#39;TOYOTA\u0026#39;] print(cars[:]) # Get the entire list, end position omitted, defaults to the last # [\u0026#39;BYD\u0026#39;, \u0026#39;BMW\u0026#39;, \u0026#39;AUDI\u0026#39;, \u0026#39;TOYOTA\u0026#39;] print(cars[-4:-2]) # Get the first two elements # [\u0026#39;BYD\u0026#39;, \u0026#39;BMW\u0026#39;] Reverse slicing cars = [\u0026#34;BYD\u0026#34;, \u0026#34;BMW\u0026#34;, \u0026#34;AUDI\u0026#34;, \u0026#34;TOYOTA\u0026#34;] print(cars[:-4:-1]) # Start position omitted, defaults to -1 # [\u0026#39;TOYOTA\u0026#39;, \u0026#39;AUDI\u0026#39;, \u0026#39;BMW\u0026#39;] print(cars[::-1]) # Get the reverse list # [\u0026#39;TOYOTA\u0026#39;, \u0026#39;AUDI\u0026#39;, \u0026#39;BMW\u0026#39;, \u0026#39;BYD\u0026#39;] List Operators # Use + to concatenate lists Use * to multiply lists [0]*10 # [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] List Methods # Add Element # Add element to the end —— list.append(element) Insert element at any position —— list.insert(position number, element) Append another list to the end —— list.extend(another list) append will add the entire list as a single element to the end of the list.\nlanguages.append([\u0026#34;Ruby\u0026#34;, \u0026#34;PHP\u0026#34;]) # [\u0026#39;Python\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;C++\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;Java\u0026#39;, [\u0026#39;Ruby\u0026#39;, \u0026#39;PHP\u0026#39;]] extend will add each element in the second list to the first list.\nlanguages = [\u0026#39;Python\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;C++\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;Java\u0026#39;] languages.extend([\u0026#34;Ruby\u0026#34;, \u0026#34;PHP\u0026#34;]) # [\u0026#39;Python\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;C++\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;Java\u0026#39;, \u0026#39;Ruby\u0026#39;, \u0026#39;PHP\u0026#39;] Delete Element # Delete element at list i position —— list.pop(i) languages = [\u0026#39;Python\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;C++\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;Java\u0026#39;] languages.pop(1) # [\u0026#39;Python\u0026#39;, \u0026#39;C++\u0026#39;, \u0026#39;R\u0026#39;, \u0026#39;Java\u0026#39;] Do not write position information, default to delete the last element —— list.pop() Delete the first occurrence of the element to be deleted in the list —— list.remove(element) Find Element # The position of the first occurrence of the element to be searched in the list —— list.index(element) Modify Element # Modify element by \u0026ldquo;index first, then assign\u0026rdquo; —— list[position]=new value List Copy # languages_2 = languages Incorrect way: This only creates an alias for the list\nCorrect way —— Shallow copy\nMethod 1: list.copy()\nMethod 2: list[:] is equivalent to slicing the entire list\nList Sorting # Use list.sort() to sort the list in place, no return value, default to increasing. Decreasing order list.sort(reverse = True) Use sorted(list) to temporarily sort the list, the original list remains unchanged, and the sorted list is returned. The same decreasing order sorted(list, reverse = True) List Reversal # Use list.reverse() to reverse the list in place, no return value List Traversal # Use for loop Tuple # Tuple Expression # Treat the tuple as an \u0026ldquo;immutable list\u0026rdquo; Does not support element addition, element deletion, element modification operations, and other operations are completely consistent with list operations Common Uses of Tuple # Packing and Unpacking\nExample 1: The return value is packaged as a tuple def f1(x): return x**2, x**3 # Packing return print(f1(3)) # (9, 27) print(type(f1(3))) # \u0026lt;class \u0026#39;tuple\u0026#39;\u0026gt; a, b = f1(3) # Unpacking assignment print(a) # 9 print(b) # 27 Example 2: Use zip function to pack numbers = [201901, 201902, 201903] name = [\u0026#34;Apple\u0026#34;, \u0026#34;Google\u0026#34;, \u0026#34;Tesla\u0026#34;] list(zip(numbers, name)) # [(201901, \u0026#39;Apple\u0026#39;), (201902, \u0026#39;Google\u0026#39;), (201903, \u0026#39;Tesla\u0026#39;)] # Unpack each tuple immediately for number,name in zip(numbers,name): print(number, name) # 201901 Apple # 201902 Google # 201903 Tesla Dictionary # Dictionary Expression # Regular dictionary is unordered and can only be accessed by key Dictionary Key Requirements\nDictionary keys cannot be repeated. If they are repeated, the previous keys are overwritten.\nDictionary keys must be immutable types，if the key is mutable, the corresponding stored value cannot be found.\nImmutable types: numbers, strings, tuples. Mutable types: lists, dictionaries, sets. Once determined, they can be freely added, deleted, and modified. Therefore, these three types cannot be used as dictionary keys. Dictionary Properties # Dictionary length len() —— Number of key-value pairs Dictionary index, get the corresponding value through dictionary[key] Dictionary Operations # Add key-value pair\nvariable name[new key] = new value Delete key-value pair\ndel variable name[key to be deleted] variable name.pop(key to be deleted) variable name.popitem() Randomly delete a key-value pair and return it as a tuple Modify value\nModify the corresponding value through \u0026ldquo;index first, then assign\u0026rdquo; d.get( )\nd.get(key, default) Get the value corresponding to the key from the dictionary d, if there is no such key, return default\nExample: Count the frequency of characters in \u0026ldquo;牛奶奶找刘奶奶买牛奶\u0026rdquo;\ns = \u0026#34;牛奶奶找刘奶奶买牛奶\u0026#34; d = {} print(d) for i in s: d[i] = d.get(i, 0)+1 # If the character appears for the first time, return default 0, then add 1 to count. If there is already a key i, return the value corresponding to the key i. print(d) # {} # {\u0026#39;牛\u0026#39;: 1} # {\u0026#39;牛\u0026#39;: 1, \u0026#39;奶\u0026#39;: 1} # {\u0026#39;牛\u0026#39;: 1, \u0026#39;奶\u0026#39;: 2} # {\u0026#39;牛\u0026#39;: 1, \u0026#39;奶\u0026#39;: 2, \u0026#39;找\u0026#39;: 1} # {\u0026#39;牛\u0026#39;: 1, \u0026#39;奶\u0026#39;: 2, \u0026#39;找\u0026#39;: 1, \u0026#39;刘\u0026#39;: 1} # {\u0026#39;牛\u0026#39;: 1, \u0026#39;奶\u0026#39;: 3, \u0026#39;找\u0026#39;: 1, \u0026#39;刘\u0026#39;: 1} # {\u0026#39;牛\u0026#39;: 1, \u0026#39;奶\u0026#39;: 4, \u0026#39;找\u0026#39;: 1, \u0026#39;刘\u0026#39;: 1} # {\u0026#39;牛\u0026#39;: 1, \u0026#39;奶\u0026#39;: 4, \u0026#39;找\u0026#39;: 1, \u0026#39;刘\u0026#39;: 1, \u0026#39;买\u0026#39;: 1} # {\u0026#39;牛\u0026#39;: 2, \u0026#39;奶\u0026#39;: 4, \u0026#39;找\u0026#39;: 1, \u0026#39;刘\u0026#39;: 1, \u0026#39;买\u0026#39;: 1} # {\u0026#39;牛\u0026#39;: 2, \u0026#39;奶\u0026#39;: 5, \u0026#39;找\u0026#39;: 1, \u0026#39;刘\u0026#39;: 1, \u0026#39;买\u0026#39;: 1} d.keys( ) d.values( )\nGet all keys and values separately.\nstudents = {201901: \u0026#39;Apple\u0026#39;, 201902: \u0026#39;Google\u0026#39;, 201903: \u0026#39;Tesla\u0026#39;} print(list(students.keys())) print(list(students.values())) # [201901, 201902, 201903] # [\u0026#39;Apple\u0026#39;, \u0026#39;Google\u0026#39;, \u0026#39;Tesla\u0026#39;] d.items( )\nprint(list(students.items())) # [(201901, \u0026#39;Apple\u0026#39;), (201902, \u0026#39;Google\u0026#39;), (201903, \u0026#39;Tesla\u0026#39;)] for k, v in students.items(): # Unpack print(k, v) # 201901 Apple # 201902 Google # 201903 Tesla Set # Set Expression # A collection of unordered elements that are mutually exclusive, which can be used for deduplication Elements must be immutable types: numbers, strings, or tuples, which can be considered as the keys of dictionaries Can be considered as a dictionary without values or values as None Set Operations # S \u0026amp; T Returns a new set, including elements that are in both sets S and T S | T Returns a new set, including all elements in sets S and T S ^ T Returns a new set, including non-common elements in sets S and T S - T Returns a new set, including elements in set S but not in set T Set Methods # Add element S.add(x) Remove element S.remove(x) Set length len(S) Set traversal —— Use for loop for star in stars: print(star) "},{"id":2,"href":"/blog/posts/2024/python-basic-data-type/","title":"Python Basic Data Type","section":"Blog","content":"This article will explore data types and common methods for them in Python. The content of this review is as follows: number type, string type, boolean type and type conversion.\nCH2 Basic Data Type # 1.Number Type # Basic Type # Integer Type # Default is decimal Binary: 0b, Octal: 0o, Hexadecimal: 0x a = bin(16) # Binary b = oct(16) # Octal c = hex(16) # Hexadecimal print(a, b, c) # 0b10000 0o20 0x10 # Attention: str type Convert other base to decimal d = int(a, 2) # Binary e = int(b, 8) # Octal f = int(c, 16) # Hexadecimal print(d, e, f) # 16 16 16 Float Type # Floating point number (0.1+0.2) == 0.3 # 0.30000000000000004 # False Computer uses binary to represent floating point number\nReason: Some decimal numbers cannot be represented by binary\nBinary Decimal 0.00011001100110011001 0.09999942779541016\n0.0011001100110011 0.1999969482421875\n0.01001100110011001 0.29999542236328125\n0.01100110011001101 0.40000152587890625\n0.1 === $1*2^{-1}$ === 0.5\nUsually not affect calculation precision Can use rounding to solve: round(parameter, certain number of decimal places) a = 3*0.1 print(a) # 0.30000000000000004 b = round(a, 1) print(b) # 0.3 b == 0.3 # True Complex Type # # Capital J or lowercase j 3+4j 2+5J # When the imaginary part coefficient is 1, it needs to be explicitly written 2+1j Operations # Addition, subtraction, multiplication, division Negation - Exponentiation ** Integer quotient //: x/y floor division Modulo operation %: x/y calculate remainder Integer and floating point number operations result in floating point numbers\nThe result of division is a floating point number 8/4 = 2.0\nOperations Functions # Calculate absolute value abs() abs(3+4j) # Calculate the modulus of the complex number a+bj (a^2+b^2)=0.5 # 5.0 Power pow(x,n) is equivalent to x**n Power modulo pow(x,n,m) is equivalent to x**n % m Rounding round(x,n) n is the number of decimal places, default is no n, rounding to integer Integer quotient and modulo operation divmod(x,y) is equivalent to returning a tuple (x//y,x % y) Sequence maximum/minimum value max( ) min( ) a = [3, 2, 3, 6, 9, 4, 5] print(\u0026#34;max:\u0026#34;, max(a)) print(\u0026#34;min:\u0026#34;, min(a)) # max: 9 # min: 2 Sum sum(x) Note: sum needs to fill in a sequence data sum((1, 2, 3, 4, 5)) # 15 Use scientific calculation library math\\scipy\\numpy import math # Import library print(math.exp(1)) # Exponential operation e^x print(math.log2(2)) # Logarithmic operation print(math.sqrt(4)) # Square root operation Equivalent to 4^0.5 import numpy as np a = [1, 2, 3, 4, 5] print(np.mean(a)) # Calculate mean print(np.median(a)) # Calculate median print(np.std(a)) # Calculate standard deviation 2.String Type # String Expression # Use \u0026quot;\u0026quot; or '' to enclose any character, refer to the situation where the string contains double quotes or single quotes. If you only want to use one, you can use the escape character \\ to achieve it. # print(\u0026#34;\u0026#34;Python\u0026#34; is good\u0026#34;) # False print(\u0026#34;\\\u0026#34;Python\\\u0026#34; is good\u0026#34;) # \\ character # \u0026#34;Python\u0026#34; is good The escape character can be used to continue inputting on a new line s = \u0026#34;py\\ thon\u0026#34; print(s) # python String Properties # String Index (Single Character) # Variable name[position number]\nPositive index – starts from 0 and increases, spaces are also a position Negative index – starts from -1 and decreases Position number cannot exceed the length of the string s = \u0026#34;My name is Peppa Pig\u0026#34; print(s[0]) # M print(s[2]) # print(s[-1]) # g print(s[-3]) # P String Slicing (Multiple Characters) # Variable name[start position:end position:slice interval]\nThe slice interval defaults to 1, which can be omitted Range: front closed and back open s = \u0026#34;Python\u0026#34; print(s[0:3:1]) == print(s[0:3]) # Pyt print(s[0:3:2]) # Pt The starting position is 0, which can be omitted The end position is omitted, which means it can be taken to the last character s = \u0026#34;Python\u0026#34; print(s[0:6]) == print(s[:6]) == print(s[:]) # Python Reverse Slicing\nThe starting position is -1, which can be omitted The end position is omitted, which means it can be taken to the first character The key point is -1, which means the previous position is -1 larger than the next position s = \u0026#34;123456789\u0026#34; print(s[-1:-10:-1]) # 987654321 print(s[:-10:-1]) # 987654321 print(s[::-1]) # 987654321 String Operators # String Concatenation # String1 + String2 String Multiplication # String * n c = a+b print(c*3) print(3*c) Member Operation # Subset in full set: Any continuous slice is a subset of the original string folk_singers = \u0026#34;Peter, Paul and Mary\u0026#34; \u0026#34;Peter\u0026#34; in folk_singers # True Traverse string characters: for character in string for s in \u0026#34;Python\u0026#34;: print(s) # P # y # t # h # o # n String Processing Functions # String Length # Number of characters len(string) Character Encoding # Convert Chinese characters, English letters, numbers, special characters, etc. to computer-recognizable binary numbers\nEach single character corresponds to a unique, non-repeating binary code Python uses Unicode encoding ord(character)：Convert character to Unicode code\nprint(ord(\u0026#34;1\u0026#34;)) # 49 print(ord(\u0026#34;a\u0026#34;)) # 97 chr(Unicode code)：Convert Unicode code to character\nprint(chr(1010)) # ϲ print(chr(23456)) # 宠 String Processing Methods # Return a list, the original string remains unchanged\nString Splitting .split(\u0026quot; \u0026quot;) # languages = \u0026#34;Python C C++ Java PHP R\u0026#34; languages_list = languages.split(\u0026#34; \u0026#34;)# The parameter in the parentheses is the mark we want to split the target string print(languages_list) print(languages_list) # [\u0026#39;Python\u0026#39;, \u0026#39;C\u0026#39;, \u0026#39;C++\u0026#39;, \u0026#39;Java\u0026#39;, \u0026#39;PHP\u0026#39;, \u0026#39;R\u0026#39;] print(languages) # Python C C++ Java PHP R String Aggregation \u0026quot;,\u0026quot;.join(\u0026quot; \u0026quot;) # Iterable type, such as string, list s = \u0026#34;12345\u0026#34; s_join = \u0026#34;,\u0026#34;.join(s) # Take out each element of the iterable object, add the aggregation character between the two s_join # \u0026#39;1,2,3,4,5\u0026#39; The elements of the sequence type must be of character type # s = [1, 2, 3, 4, 5] cannot be used for aggregation s = [\u0026#34;1\u0026#34;, \u0026#34;2\u0026#34;, \u0026#34;3\u0026#34;, \u0026#34;4\u0026#34;, \u0026#34;5\u0026#34;] \u0026#34;*\u0026#34;.join(s) # \u0026#39;1*2*3*4*5\u0026#39; Delete specific characters at both ends .strip(\u0026quot;delete character\u0026quot;) # strip searches from both sides, deletes the specified character when encountered, stops searching when a non-specified character is encountered There are also left deletion lstrip and right deletion rstrip s = \u0026#34; I have many blanks \u0026#34; print(s.strip(\u0026#34; \u0026#34;)) # Search from both sides, delete spaces after encountering the specified character, then stop # I have many blanks print(s.lstrip(\u0026#34; \u0026#34;)) # I have many blanks print(s.rstrip(\u0026#34; \u0026#34;)) # I have many blanks String Replacement .replace(\u0026quot;replaced\u0026quot;, \u0026quot;replaced with\u0026quot;) # s = \u0026#34;Python is coming\u0026#34; s1 = s.replace(\u0026#34;Python\u0026#34;,\u0026#34;Py\u0026#34;) print(s1) # Py is coming String Count .count(\u0026quot;sample string\u0026quot;) # s = \u0026#34;Python is an excellent language\u0026#34; print(\u0026#34;an:\u0026#34;, s.count(\u0026#34;an\u0026#34;)) # an: 2 String Letter Case and First Letter Capital .upper() .lower() .title() # s = \u0026#34;Python\u0026#34; print(s.upper()) # PYTHON print(s.lower()) # python print(s.title()) # Python 3.Boolean Type # Logical Operation Results # any() Data has a non-zero value is True all() Data has a zero value is False (all non-zero) print(any([False,1,0,None])) # 0 False None are all zero # True print(all([False,1,0,None])) # False Mask for numpy array # import numpy as np x = np.array([[1, 3, 2, 5, 7]]) # Define numpy array print(x \u0026gt; 3) # [[False False False True True]] x[x \u0026gt; 3] # array([5, 7]) 4.Type Identification and Type Conversion # Type Identification # type()\nage = 20 name = \u0026#34;Ada\u0026#34; print(type(age)) # \u0026lt;class \u0026#39;int\u0026#39;\u0026gt; print(type(name)) # \u0026lt;class \u0026#39;str\u0026#39;\u0026gt; isinstance(variable, type) Recognize inheritance\nThe variable type is a subtype of the type, then it is true, otherwise it is false print(isinstance(age, int)) # Recognize inheritance, here int is equivalent to a class # True print(isinstance(age, object)) # object is the ancestor of all classes # True String Check Methods # string.isdigit() Character is only composed of numbers string.isalpha() Character is only composed of letters string.isalnum() Character is only composed of numbers and letters Type Conversion # Number type to string str(number type) String composed of only numbers to number int() float() eval() s1 = \u0026#34;20\u0026#34; int(s1) # 20 s2 = \u0026#34;10.1\u0026#34; # int(s2) will error float(s1) # 20.0 eval(s2) # 10.1 "},{"id":3,"href":"/blog/posts/2024/python-basic-syntax-elements/","title":"Python Basic Syntax Elements","section":"Blog","content":"Sometimes you may forget about the basic of Python, so let us take a look at the summary of Python basic summary. The content of this review is as follows: data type, variable, control flow, input \u0026amp; output, PEP8 format.\nCH1 Basic Syntax Elements # 1 Data Type # Basic Type: Number, String, Boolean # Number Type\nint float complex (a+bj) String Type\nstr: use \u0026quot; \u0026quot; or ' ' Boolean Type\nbool y = 2 \u0026lt; 1 y # False Composite Type: List, Tuple, Dictionary, Set # List Type, ordered\na = [1, 2, 3, 4, 5] a[4] # 5 Tuple Type, ordered, elements are not modifiable\nb = (1, 2, 3, 4, 5) b[0] # 1 Dictionary Type, key-value mapping, unordered\nstudent = {201901: \u0026#34;john\u0026#34;, 201902: \u0026#34;howe\u0026#34;, 201903: \u0026#34;timerring\u0026#34;} student[201902] # \u0026#39;howe\u0026#39; Set Type, a collection of unique elements, unordered\ns = {\u0026#34;john\u0026#34;, \u0026#34;howe\u0026#34;, \u0026#34;timerring\u0026#34;, \u0026#34;john\u0026#34;} s # {\u0026#39;john\u0026#39;, \u0026#39;howe\u0026#39;, \u0026#39;timerring\u0026#39;} 2 Variable # Variable Naming # What can be used as variable names?\nuppercase letters, lowercase letters, numbers, underscores, and Chinese characters. strictly case-sensitive What is not allowed?\nthe first character cannot be a number there cannot be spaces in the middle of the variable name cannot be the same as the 33 Python reserved words Variable Name Definition Techniques\nunderscore (variable and function name) variable name consists of multiple words: use _ to connect multiple words age_of_students = [17, 18, 19] Camel Case (class name) variable name consists of multiple words: capitalize the first letter of each word AgeOfStudents Constant (e.g. $\\pi$, e) variable name all letters are uppercase MAX_ITERATION = 1000 Variable Assignment # x, y = 1, 2 # separated by \u0026#34;,\u0026#34; print(x, y) x, y = y, x print(x, y) 3 Control Flow # Loop (for) # res = 0 for i in [1,2,3,4,5]: res += i res # 15 Loop (while) # i = 1 res = 0 while i \u0026lt;= 5: res += i i += 1 res # 15 Branch (if) # if condition: execute statement else: execute statement 4 Input \u0026amp; Output # Data Input # External File Import\nfrom local disk, network, etc. See File, Exception, and Module. Dynamic Interactive Input\nx = input(\u0026#34;please input: \u0026#34;) type(x) # str, so the addition is string concatenation Use eval() to remove the quotes\nx = eval(input(\u0026#34;please input: \u0026#34;)) type(x) # int Data Output # Print # Each print() defaults to a newline\nprint(\u0026#34;timerring\u0026#34;) # timerring print(1) # 1 Line Break Control end= # print(123,end=\u0026#34; \u0026#34;)# also can customize the end content print(456) # 123 456 Combined Output # PI = 3.1415926 E = 2.71828 print(\u0026#34;PI = \u0026#34;, PI, \u0026#34;E = \u0026#34;, E) Formatting Output # # one-to-one correspondence print(\u0026#34;PI = {0},E = {1}\u0026#34;.format(PI, E)) # PI = 3.1415926,E = 2.71828 print(\u0026#34;PI = {0},E = {0}\u0026#34;.format(PI, E)) # PI = 3.1415926,E = 3.1415926 # default order print(\u0026#34;PI = {},E = {}\u0026#34;.format(PI, E)) # PI = 3.1415926,E = 2.71828 Decorative Output # Padding Output\nprint(\u0026#34;{0:_^20}\u0026#34;.format(PI)) # 0 is the variable PI, : is the modifier output, _ is the modifier character, ^ is centered, 20 is the output width # ____3.1415926_____ padding print(\u0026#34;{0:*\u0026lt;30}\u0026#34;.format(PI)) # \u0026lt; is left-aligned # 3.1415926********************* Thousands Separator\nprint(\u0026#34;{0:,}\u0026#34;.format(10000000)) # 10,000,000 Simplified Floating Point Output # keep 2 decimal places print(\u0026#34;{0:.2f}\u0026#34;.format(PI)) # 3.14 Output as a percentage print(\u0026#34;{0:.1%}\u0026#34;.format(0.818727)) # 81.9% Scientific Notation Output print(\u0026#34;{0:.2e}\u0026#34;.format(0.818727)) # 8.19e-01 Integer Base Conversion Output\nDecimal to Binary, Unicode, Decimal, Octal, Hexadecimal \u0026#34;Binary {0:b}, Unicode {0:c}, Decimal {0:d}, Octal {0:o}, Hexadecimal {0:x}\u0026#34;.format(450) # Binary 11100010, Unicode \\u1b6, Decimal 450, Octal 702, Hexadecimal 1c2 Summary # Formatting Output: \u0026quot;character{0:modifier}character{1:modifier}character\u0026quot;.format(v0, v1)\nModifier Output: must be strictly in order.\n5 Program Format (PEP8 Format) # Line Maximum Length # All lines are limited to a maximum of 79 characters\nIndentation # Use indentation to represent the logical relationship between statements, indentation: 4 characters Use Spaces # Add a space on both sides of the binary operator Add spaces around different priority operators x = x*2 - 1 c = (a+b) * (a-b) Use spaces after commas Avoid Using Spaces # Do not add spaces around = when specifying keyword arguments or default parameter values def fun(n=1, m=2): print(n, m) Comments # Single-line comment # comment content\nMulti-line comment \u0026quot;\u0026quot;\u0026quot;comment content, can be split into multiple lines\u0026quot;\u0026quot;\u0026quot;\n"},{"id":4,"href":"/blog/posts/2024/deploy-github-pages-with-gpg-signing/","title":"Deploy Github Pages With GPG Signing","section":"Blog","content":"I have been busy migrating my blog this week. Coincidentally, I learned that there may be cases of commit forgery on GitHub. Therefore, for security reasons, I added a GPG signature. However, when deploying Hugo, I encountered many problems regarding whether GPG signatures can also be used. Fortunately, I finally solved them.\nIf you don\u0026rsquo;t know what GPG is, you can read GPG 101.\nHow to Deploy Github Pages With Gpg Signing and Verify # There are two main ways to deploy:\nPush all source files to GitHub directly, then use the relevant action to complete the entire deployment process. Isolate the blog source files from the built files, push the source files to the private repository of GitHub each time, and then set up the relevant workflow in the private repository to push to the public static repository. To ensure greater security, I chose the second method, deploying Hugo in the workflow of GitHub Pages, and using the actions-gh-pages action. However, due to various reasons, the author of this action does not want to add the GPG signature feature. Therefore, we have to solve the problem ourselves.\nImport GPG Key # First, I found a workflow for importing GPG keys on GitHub. After reading the documentation, my own workflow is as follows:\n- name: Import GPG key # import the gpg key to the github action uses: crazy-max/ghaction-import-gpg@v6 # repository https://github.com/crazy-max/ghaction-import-gpg with: # I use the subkey to sign the commit, if you use the primary key, you can refer to his repository docs. gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }} # the secret gpg subkey passphrase: ${{ secrets.PASSPHRASE }} # the passphrase of the gpg subkey git_user_signingkey: true git_commit_gpgsign: true fingerprint: ${{ secrets.FINGERPRINT }} # the fingerprint of the public subkey you use If you only use the primary secret key of GPG, you do not need to add the fingerprint, and I generated a dedicated subkey for signing for security reasons. Therefore, you need to specify the fingerprint of the public key of the subkey. Note that the fingerprint should be entered without spaces; otherwise, it will report an error 67108933 Not implemented \u0026lt;GPG Agent\u0026gt;. I added this note to the corresponding issue.\nDon\u0026rsquo;t forget to fill in the corresponding secret variables and values in the repository.\nDeploy # Since the author does not plan to add GPG signature, we need to clone the project and modify it ourselves. Usually, the -S option is used in the commit to specify the use of GPG signature. Therefore, I found the corresponding function in the commit and added the corresponding -S option.\nNote that the modified workflow you created cannot be used directly. The author\u0026rsquo;s instructions are as follows:\nThis action and my other actions do not provide the branch execution. I add the lib/index.js for only each release commit. After releasing, I delete it.\nTherefore, we still need to publish a version ourselves. Run ./release.sh directly in the project, and publish the version you wrote. After that, you can reference your version in the workflow, and my workflow is as follows:\n- name: Deploy Web uses: timerring/actions-gh-pages@v5.0.0 # this is adjusted action from peaceiris/actions-gh-pages, you can use it directly. with: personal_token: ${{ secrets.PERSONAL_TOKEN }} # the personal token of the github action external_repository: your_username/your_repository # your target repository publish_branch: main # the branch you want to deploy publish_dir: ./public # the directory you want to deploy user_name: ${{ secrets.USER_NAME }} # the name of the github action user_email: ${{ secrets.USER_EMAIL }} # the email of the github action # ATTENTION: please add your github verified email commit_message: ${{ github.event.head_commit.message }} Note that please ensure that you add the email verified by GitHub; otherwise, the default parameter ${process.env.GITHUB_ACTOR}@users.noreply.github.com will only generate USERNAME@users.noreply.github.com, not ID+USERNAME@users.noreply.github.com. This is a historical issue with GitHub, details can be found here. However, your private key does not contain this UUID, so it cannot be verified by GPG. (Even if you add this UID to the keys, since the user email has not been verified by GitHub, it will only display unverified in the end.)\nIn short, if your GitHub account was created after July 18, 2017, then your GitHub email address is ID+USERNAME@users.noreply.github.com, not the default USERNAME@users.noreply.github.com. In this case, you need to specify the user_email parameter and fill in the email address you have verified.\nFinally, after pushing to the blogsource repository, the workflow will automatically deploy to the blog repository, and the commit will be signed with GPG and display verified!\nYou can check my result here, every commit pushed from the blogsource repository will be signed with GPG and display verified.\nAppendix # If you also need my hugo deployment method, you can directly use the action version I modified and released, repository address timerring/actions-gh-pages, refer to my complete workflow yaml, and don\u0026rsquo;t forget to fill in the corresponding secret variables and values:\nname: deploy on: push: branches: - main workflow_dispatch: jobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 ref: main - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;0.108.0\u0026#34; extended: true - name: Build Web run: hugo --minify - name: Import GPG key # import the gpg key to the github action uses: crazy-max/ghaction-import-gpg@v6 # repository https://github.com/crazy-max/ghaction-import-gpg with: # I use the subkey to sign the commit, if you use the primary key, you can refer to his repository docs. gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }} # the secret gpg subkey passphrase: ${{ secrets.PASSPHRASE }} # the passphrase of the gpg subkey git_user_signingkey: true git_commit_gpgsign: true fingerprint: ${{ secrets.FINGERPRINT }} # the fingerprint of the public subkey you use - name: Deploy Web uses: timerring/actions-gh-pages@v5.0.0 # this is adjusted action from peaceiris/actions-gh-pages, you can use it directly. with: personal_token: ${{ secrets.PERSONAL_TOKEN }} # the personal token of the github action external_repository: your_username/your_repository # your target repository publish_branch: main # the branch you want to deploy publish_dir: ./public # the directory you want to deploy user_name: ${{ secrets.USER_NAME }} # the name of the github action user_email: ${{ secrets.USER_EMAIL }} # the email of the github action # ATTENTION: please add your github verified email commit_message: ${{ github.event.head_commit.message }} "},{"id":5,"href":"/blog/posts/2024/gpg-101/","title":"GPG 101","section":"Blog","content":" GnuPG is a complete and free implementation of the OpenPGP standard as defined by RFC4880(also known as PGP). GnuPG allows you to encrypt and sign your data and communications; it features a versatile key management system, along with access modules for all kinds of public key directories. GnuPG, also known as GPG, is a command line tool with features for easy integration with other applications.\nThis article I will introduce the basic usage of GPG.\nWhat is GPG? # When it comes to GPG, you should know the PGP first. The PGP is a protocol that provides encryption and digital signature services(Pretty Good Privacy). The GPG is the implementation of the PGP protocol. PGP can support many kinds of encryption algorithms, such as AES, RSA, ECC, etc.\nAnd you can add it to your Github to make every commit to your repository is signed.\nDo not upload any message to the public key servers, it\u0026rsquo;s not secure! Do not do any operation related to public key servers! In this article, I will not mention any operation related to public key servers! The public key servers is a centralized service, and will not delete any messages even you have revoked the public key.\nSome abbreviations # Usage # A =\u0026gt; Authentication (eg. ssh) C =\u0026gt; Certify (Only the primary key have this capability) E =\u0026gt; Encrypt S =\u0026gt; Sign (eg. sign the commit) ? =\u0026gt; Unknown capability\nType # sec =\u0026gt; Secret Primary Key ssb =\u0026gt; Secret Subkey pub =\u0026gt; Public Primary Key sub =\u0026gt; Public Subkey\nFormat # armored: asc binary: pgp Fingerprint # Each key or subkey has a line of 10 groups of 4 characters. This is the SHA-1 hash of the entire key, which is 160 bits, 20 bytes, and is usually represented as 40 hexadecimal numbers. This fingerprint can be used to uniquely identify a key pair.\nKey ID # Format:\nLong: the last 16 characters of the fingerprint. Short: the last 8 characters of the fingerprint. UID # UID is the user id which contains the username, comment and email. Name (Comment) \u0026lt;Email\u0026gt;\nOne secret key can have multiple UIDs. UID is used for the whole keys not just for specific subkey. The uid can add easily, but the existing uid cannot be adjusted, only can be revoked. Validity # When import a key, it will default to [unknown]. You can check the fingerprint and the owner\u0026rsquo;s claim to verify the key.\nTrust network # Trust levels:\nultimate: Normally you should only ultimately trust your own keys. The root of the trust chain. full: Full trust the key, also contains the keys signed by this key. marginal: Trust the key, but not fully trust. If three people trust the key, then I trust it. never: Never trust the key along with the keys signed by this key. How to use it? # Installation # brew install gpg Generate Key # You have to do the following steps quickly. If the process is timeout, you will need to re-do the steps.\ngpg --full-generate-key # 1. Then select the key type, it\u0026#39;s fine by default. # 2. Then select the key expiration, I choose `3y`, because you can renew the key later, and that\u0026#39;s make sure you cn still control the key. Expired keys are only invalid for new encryption and signing. But you can still decrypt and verify the existing information, just will be marked as expired. # 3. Then enter you name(uid), I don\u0026#39;t recommend you to use your real name, you can instead of your username. # 4. Then enter your email, make sure to use the verified email in Github, it\u0026#39;s highly recommended to use the `no-reply` email provided by Github to avoid spam. # 5. Then enter the passphrase, it\u0026#39;s used to encrypt the key. # 6. After a rondom move, your key is generated. Generate subkey # It is recommended to generate a subkey for the key. And just use the primary key to sign the new subkeys. Each subkey has its own application scenario.\n# Enter the primary key interactive mode gpg --edit-key yourNameInprimaryKey(uid or keyid) gpg \u0026gt; addkey # Then the process is the same as the previous steps. This time I choose the RSA(sign only). # Btw, before generate the subkey, it will ask you to enter the passphrase of the primary key. # After the subkey is generated, don\u0026#39;t forget to save the key. gpg \u0026gt; save Genrate a revocation certificate # Imagine you forget the passphrase of the key, or you lose the control, you can use the revocation certificate to revoke the public key. If not, you will need to notify your friends that you don\u0026rsquo;t use the key anymore. That will be a big problem. Thus it is necessary to generate a revocation certificate.\ngpg --gen-revoke -ao revoke.pgp uid(or keyid) # Make choices based on your situation Then you will get a revoke.pgp file, you can use it to revoke the key.\nlist the keys # gpg --list-keys # list the public keys, you can also use `gpg -k` gpg --list-secret-keys # list the secret keys, you can also use `gpg -K` The common usage # # The most common usage! -k or -K gpg -K --with-fingerprint --with-subkey-fingerprint --keyid-format long Besides, there are some parameters that you may need to use:\n--with-fingerprint # print the fingerprint of the key --with-subkey-fingerprint # print the fingerprint of the subkey --with-sig-list # print the signature of keys Export the key # gpg -ao public-key.txt --export uid(or keyid) # export the public key # It is better to add your secure path before the secret-key, it will export to the machine directly. gpg -ao secret-key --export-secret-key primarykeyid! # export the primary secret key, remember to add the `!` to export the single key, or you will export the whole secret keys. gpg -ao sign-subkey --export-secret-subkeys subkeyid! # export the sign sub secret key.[S] gpg -ao encrypt-subkey --export-secret-subkeys encryptkeyid! # export the encrypt sub secret key.[E] Most usage # Besides, GPG private key exported as an ASCII armored version or its base64 encoding (often).\ngpg --export-secret-key --armor keyid \u0026gt; secret-key.asc Delete the key # After Export the keys, you can delete then from the machine.\ngpg --delete-secret-keys uid(or keyid) # delete the secret key gpg --delete-keys uid(or keyid) # delete the public key As we know, the keys is stored in the machine in plaintext, it will not delete the keys completely, you can use the wipe or other tools to assist. But there is still the risk of restoring the keys. If you really want to generate and delete the keys in the most secure way, you can try Tails(boum.org).\nImport the key # Strongly discourage any operation related to public key servers!\ngpg --import yourkeysfile(your secret key or others public key) # output # the `#` means the primary key is not imported, so it\u0026#39;s safe. # sec# rsa3072/keyid 2021-01-11 [SC] # ... # the `#` means the subkey is imported. # ssb # rsa3072/keyid 2021-01-11 [E] Sign and verify # # Sign # 1. generate the binary signature file gpg --sign input.txt # 2. generate the ASCII signature file gpg --clearsign input.txt # 3. generate the signature file and original file separately. gpg --armor --detach-sign input.txt # verify gpg --verify input.txt.asc input.txt Encrypt and decrypt # # encrypt # uid(or keyid) is the uid or keyid of the recipient which means you have to import the public key of the recipient in advance. gpg --encrypt --recipient uid(or keyid) input.txt --output output.txt # a simple version gpg -se -o encrypt.txt -r uid(or keyid) input.txt # decrypt gpg --decrypt encrypt.txt --output decrypt.txt Revoke # Even you have revoke the key, if there is still someone sent you message by the outdated public key, you can decrypt the message as well as the hacker can. This operation import the revocation certificate which will make the whole keys invalid. The revoked key is only invalid for new encryption and signing. But you can still decrypt and verify the existing information, but it will be marked as revoked.\nImagine the scenario, Alice\u0026rsquo;s secret key is leaked, she will send a key revocation certificate, but the distribution is not centralized, so she cannot make sure everyone has received the message. Besides, the key revocation certificate is need to be signed by the secret key of the Alice, so if the secret key is lost, she will not be able to revoke the key.\nSo once you have revoked the key, you should push the revoked public key to where you publish the key always, and notify your friends.\n# revoke the primary key # import the public key first gpg --import gpg-linus.asc # then import the revoke certificate which will make the public key invalid directly. gpg --import revoke # gpg -k to check the key is revoked. eg.[revoked: 2024-01-01] # revoke the subkey gpg --edit-key uid(or keyid) # then select the subkey you want to revoke gpg \u0026gt; list gpg \u0026gt; key 1 # 1 is the index of the subkey gpg \u0026gt; revoke gpg \u0026gt; save Config your git # Refer to Github docs and Github docs\nReference # Github docs GnuPG docs ulyc blog Ruanyifeng blog GaoWeiX blog "},{"id":6,"href":"/blog/posts/2024/housewarming-2024/","title":"Housewarming 2024","section":"Blog","content":"So after a long time, I decide to restart my blog program. In my daily development, I have a lot of thoughts and ideas, thus I will write some documents to record them. But I believe that sharing is the best way to learn. A specific example is cryptography, which means the closing source algorithm is never the safest. Only algorithms that have been vetted by the public are truly secure.\nRestart # The reason why I call it restart is that I have been using hexo for a long time, and I wrote the blogs via hexo from the time I entered the university. But there is a serious problem in hexo, which is the deploy speed is too slow. When I have a little blogs, it is not a big problem, but the number of blogs increases with time, the deploy time exceeds 2 minutes, which is unbearable for me and it is hard to check the blog before publishing. And that makes me don\u0026rsquo;t want to publish blogs again, and then I reduced the times of publishing blogs until stopped.\nAfter about 1 year, now I decide to restart it, I came across hugo by chance, and just as the documentation says:\nHugo is a static site generator written in Go, optimized for speed and designed for flexibility. With its advanced templating system and fast asset pipelines, Hugo renders a complete site in seconds, often less.\nSo I finally decide to migrated contents from hexo to hugo.\nMigration # The migration process is smooth. The content types are nearly uniform, so I just need to pay attention to the project structure. And reading the documentation, the hugo mainly contains these parts:\n. ├── archetypes # the template of creating new pages ├── assets # the static files ├── config.toml # the configuration of the blog ├── content # blogs ├── public # hugo build output ├── resources # some resources ├── static # the static files └── themes # the added themes will be here and the theme structure is similar to the main hugo The creation of the blog can be referred to the official documentation.\nThemes # The theme I choose is hugo-book, which is a theme for hugo. Simple and graceful.\nMathematics # For the mathematics, there are two ways in browser to render the formula, the Katex and MathJax. They are all open source javascript libraries. Since I knew the markdown syntax, I use the Typora which supports MathJax library. So I get used to its syntax which accounts for the reason why I choose it.\nDeployment # The deployment is done by github actions, and the workflow file is in the .github/workflows/hugo.yml. BTW, the most contents on the search engine are about the blog deployment in personal github pages, which is not suitable for me, cause the personal github pages is used to store personal homepage. Thus, I will use the private repository blogsource to store the source code and use the blog repository to host the blog.\nAbout the process, I found a toturial at random, you can refer to it. And for more infomation you can refer to the official documentation.\nThere are some key steps to note:\nMake sure the blog repository is public and the Settings -\u0026gt; Pages -\u0026gt; Build and deployment -\u0026gt; Source is set to Deploy from a branch, and the branch is main as well as /(root) is selected.\nGenerate a personal token in github and set it in the blogsource repository. This guarantees you have the permission to operate the target repository.\nSet a deploy.yml file in the .github/workflows directory of blog source code repository which is private. You can refer to this code name: deploy on: push: branches: - main workflow_dispatch: jobs: build: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 ref: main - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;0.108.0\u0026#34; # your hugo version. extended: true - name: Build Web run: hugo --minify - name: Deploy Web uses: peaceiris/actions-gh-pages@v3 with: # Make sure the name is same as what you set in the repo. PERSONAL_TOKEN: ${{ secrets.PERSONAL_TOKEN }} # Set the token in the `blog` repository. EXTERNAL_REPOSITORY: timerring/blogs # Set the target repository. PUBLISH_BRANCH: main PUBLISH_DIR: ./public # Set the publish directory. commit_message: ${{ github.event.head_commit.message }} Add the publishDir = \u0026quot;public\u0026quot; in the config.toml file and set your baseURL according to your target.\nAfter setting these, you can try to push it as normal. You will only need to push the source code to the blogsource repository, and then the blog will be deployed to the blog repository automatically through github actions.\nFonts # From the process of configurate the fonts, I have learned a lot about the fonts.\nStyle # The Style of fonts mainly contains these:\nserif: the fonts with serifs always have a small line at the end of the character. Often used in formal occasions. sans-serif: the fonts focus on simplicity and clarity. Hence it is often used in the web. monospace: the fonts with the same width for all characters. Which is often used in the code display. Weight # Different weights of fonts have different names:\n100 - Thin(Hairline) 200 - Extra Light (Ultra Light) 300 - Light 400 - Regular (Normal,Book,Roman) 500 - Medium 600 - Semi Bold (Demi Bold) 700 - Bold 800 - Extra Bold (Ultra Bold) 900 - Black (Heavy) The Regular and Bold are the most commonly used weights.\nType # The type of fonts mainly contains these:\nttf: TrueType is a font format developed by Apple and Microsoft focusing on the display in the printer in the beginning. otf: OpenType is a extension of TrueType. woff: Web Open Font Format which is a font format compressed to improve the loading speed in web. woff2: Web Open Font Format 2.0. The mostly differ in regard to the compression algorithm. For the fonts part, I have use the production of JetBrains for many years, so I choose the JetBrainsMono-Bold font for the code display.\nAnd for the content part, I use the Helvetica Neue font which is a popular sans-serif font and it is suitable for the web content.\nExtension # In conclusion, I use these extensions in the blog:\ngiscus: the comment system. mathjax: the mathematics system. Google Custom Search Engine: the search system. "},{"id":7,"href":"/blog/docs/about/","title":"About","section":"Docs","content":" About # John Howe GPG Public: 0x26FEE0805E6C9F71 Key fingerprint = B613 FBAF 0822 BEBD FABF 8F65 26FE E080 5E6C 9F71 Coffee chat # blog topic and coffee chat buy me a coffee Where to find me # RSS:source Github:timerring Email: timerring[at]gmail.com Footprints # "},{"id":8,"href":"/blog/docs/friends/","title":"Friends","section":"Docs","content":" Friends links # Me "},{"id":9,"href":"/blog/docs/now/","title":"Now","section":"Docs","content":" Recent # Work on my project bilive. Struggling in Shenzhen Received my Bachelor of Engineering degree from Shandong University Interests # Learning about LLM Inference optimization Nvidia GPU background ffmpeg Addicted to cryptography Objectives # Complete my open source project bilive! Transfer all my blogs to here. Push a tutorial about video and audio codec. Changelog # 2024-12-15 Transfer from hexo to hugo. "}]