<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on timerring</title><link>https://blog.timerring.com/tags/docker/</link><description>Recent content in Docker on timerring</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 09 Apr 2025 16:39:42 +0800</lastBuildDate><atom:link href="https://blog.timerring.com/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Multi Platform Builds Docker</title><link>https://blog.timerring.com/posts/multi-platform-builds-docker/</link><pubDate>Wed, 09 Apr 2025 16:39:42 +0800</pubDate><guid>https://blog.timerring.com/posts/multi-platform-builds-docker/</guid><description>&lt;p>This is a viable build record. The multi platform builds are supported by &lt;code>docker buildx&lt;/code>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, which is related to &lt;code>binfmt_misc&lt;/code> and &lt;code>QEMU&lt;/code>.&lt;/p></description></item><item><title>Docker With GPU</title><link>https://blog.timerring.com/posts/docker-with-gpu/</link><pubDate>Tue, 18 Mar 2025 12:21:21 +0800</pubDate><guid>https://blog.timerring.com/posts/docker-with-gpu/</guid><description>&lt;p>This post is to introduce how to use gpu in docker, which also covers the basic usage of gpu on the host machine.&lt;/p></description></item><item><title>The Tips About Dockerfile</title><link>https://blog.timerring.com/posts/the-tips-about-dockerfile/</link><pubDate>Sat, 18 Jan 2025 21:05:23 +0800</pubDate><guid>https://blog.timerring.com/posts/the-tips-about-dockerfile/</guid><description>&lt;p>Normally, we often write a &lt;code>Dockerfile&lt;/code> in the current directory.&lt;/p>
&lt;ul>
&lt;li>The &lt;code>Dockerfile&lt;/code> is a configuration file that describes how to build the image. You can refer to the &lt;a href="https://docs.docker.com/reference/dockerfile/" target="_blank">official documentation&lt;span style="white-space: nowrap;">&lt;svg width=".7em" height=".7em" viewBox="0 0 21 21" xmlns="http://www.w3.org/2000/svg">&lt;path d="m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z" fill="currentColor"/>&lt;path d="M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z" fill="currentColor">&lt;/svg>&lt;/span>&lt;/a> for more details.&lt;/li>
&lt;li>If you list &lt;strong>more than one&lt;/strong> &lt;code>CMD&lt;/code>, only the last one takes effect. So if you have multiple commands to run, you better write them in a script file.&lt;/li>
&lt;li>Docker is not the VMware, there is no &lt;code>systemd&lt;/code> in the container. Its startup program is the container application process. The container exists for the main process. Once the main process exits, the container loses its meaning of existence and thus exits. So when you execute multiple commands and if they are blocking, you better write the previous commands in nohup and the last command in the blocking command. (never use the command such as &lt;code>CMD service nginx start&lt;/code>, the CMD only will execute as &lt;code>CMD [ &amp;quot;sh&amp;quot;, &amp;quot;-c&amp;quot;, &amp;quot;service nginx start&amp;quot;]&lt;/code>, when the sh is executed, the container will exit, the correct way is run it directly &lt;code>CMD [&amp;quot;nginx&amp;quot;, &amp;quot;-g&amp;quot;, &amp;quot;daemon off;&amp;quot;]&lt;/code>)&lt;/li>
&lt;/ul></description></item><item><title>Docker Cheatsheet</title><link>https://blog.timerring.com/posts/docker-cheatsheet/</link><pubDate>Fri, 17 Jan 2025 10:06:35 +0800</pubDate><guid>https://blog.timerring.com/posts/docker-cheatsheet/</guid><description>&lt;p>This is a cheatsheet of docker.&lt;/p>
&lt;p>Note: the docs will be updated from time to time.&lt;/p></description></item><item><title>Docker 101</title><link>https://blog.timerring.com/posts/docker-101/</link><pubDate>Thu, 16 Jan 2025 22:33:49 +0800</pubDate><guid>https://blog.timerring.com/posts/docker-101/</guid><description>&lt;p>Docker is a practical tool for everyday use, and like &lt;code>Git&lt;/code>, you can learn it in just 30 minutes.&lt;/p></description></item></channel></rss>