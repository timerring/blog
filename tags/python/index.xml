<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python on timerring</title><link>https://blog.timerring.com/tags/python/</link><description>Recent content in Python on timerring</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 22 Mar 2025 13:13:16 +0800</lastBuildDate><atom:link href="https://blog.timerring.com/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Implement danmaku rendering algorithm from scratch</title><link>https://blog.timerring.com/posts/implement-danmaku-rendering-algorithm-from-scratch/</link><pubDate>Sat, 22 Mar 2025 13:13:16 +0800</pubDate><guid>https://blog.timerring.com/posts/implement-danmaku-rendering-algorithm-from-scratch/</guid><description>&lt;p>This article presents a comprehensive implementation of a danmaku rendering algorithm from the ground up, along with a thorough analysis of the danmaku rendering algorithm. The source code is available on &lt;a href="https://github.com/timerring/DanmakuConvert" target="_blank" rel="nofollow noopener">GitHub&lt;span style="white-space: nowrap;">&lt;svg width=".7em" height=".7em" viewBox="0 0 21 21" xmlns="http://www.w3.org/2000/svg">&lt;path d="m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z" fill="currentColor"/>&lt;path d="M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z" fill="currentColor">&lt;/svg>&lt;/span>&lt;/a>.&lt;/p></description></item><item><title>CPU can only see the threads</title><link>https://blog.timerring.com/posts/cpu-can-only-see-the-threads/</link><pubDate>Thu, 23 Jan 2025 23:36:22 +0800</pubDate><guid>https://blog.timerring.com/posts/cpu-can-only-see-the-threads/</guid><description>&lt;p>In python, due to the GIL (Global Interpreter Lock), which is a mutex and ensures only one thread can execute at a time, so the multiple threads parallel execution is not supported under the CPython interpreter. But what about the multiple processes? What is the difference between them? How to choose the right method? Do you know the coroutine? Let&amp;rsquo;s explore it together.&lt;/p></description></item><item><title>The Encode and Decode in Python</title><link>https://blog.timerring.com/posts/the-encode-and-decode-in-python/</link><pubDate>Sun, 19 Jan 2025 13:07:49 +0800</pubDate><guid>https://blog.timerring.com/posts/the-encode-and-decode-in-python/</guid><description>&lt;p>Do you really know the encode and decode in Python?&lt;/p></description></item><item><title>The Instance Class Static Magic Method in Python</title><link>https://blog.timerring.com/posts/the-instance-class-static-magic-method-in-python/</link><pubDate>Tue, 14 Jan 2025 21:51:24 +0800</pubDate><guid>https://blog.timerring.com/posts/the-instance-class-static-magic-method-in-python/</guid><description>&lt;p>So what is the difference between the Instance method, the Class method and the Static method?&lt;/p></description></item><item><title>How to Publish Your Code as a Pip Module</title><link>https://blog.timerring.com/posts/how-to-publish-your-code-as-a-pip-module/</link><pubDate>Tue, 07 Jan 2025 20:46:08 +0800</pubDate><guid>https://blog.timerring.com/posts/how-to-publish-your-code-as-a-pip-module/</guid><description>&lt;p>Last week, I have made a python cli tool. To make it more convenient to use, I want to publish it as a pip module, so I have made some research and mistakes, and finally succeeded.&lt;/p></description></item><item><title>Python Generator Iterator and Decorator</title><link>https://blog.timerring.com/posts/python-generator-iterator-and-decorator/</link><pubDate>Mon, 23 Dec 2024 19:19:14 +0800</pubDate><guid>https://blog.timerring.com/posts/python-generator-iterator-and-decorator/</guid><description>&lt;p>This article will review the basic knowledge of Python, including generator, iterator, and decorator.&lt;/p></description></item><item><title>Python Underlying Mechanism</title><link>https://blog.timerring.com/posts/python-underlying-mechanism/</link><pubDate>Mon, 23 Dec 2024 19:12:31 +0800</pubDate><guid>https://blog.timerring.com/posts/python-underlying-mechanism/</guid><description>&lt;p>This article will review the underlying mechanism of Python, including data types and derivation operations.&lt;/p></description></item><item><title>Python Files Exceptions and Modules</title><link>https://blog.timerring.com/posts/python-files-exceptions-and-modules/</link><pubDate>Mon, 23 Dec 2024 19:02:35 +0800</pubDate><guid>https://blog.timerring.com/posts/python-files-exceptions-and-modules/</guid><description>&lt;p>This article will review the basic knowledge of Python, including files, exceptions, and modules.&lt;/p></description></item><item><title>Python Object Oriented Programming</title><link>https://blog.timerring.com/posts/python-object-oriented-programming/</link><pubDate>Mon, 23 Dec 2024 18:23:06 +0800</pubDate><guid>https://blog.timerring.com/posts/python-object-oriented-programming/</guid><description>&lt;p>This article will review the object-oriented programming of Python. Mainly about the class, inheritance, and polymorphism.&lt;/p></description></item><item><title>Python Cheatsheet</title><link>https://blog.timerring.com/posts/python-cheatsheet/</link><pubDate>Sun, 22 Dec 2024 00:09:26 +0800</pubDate><guid>https://blog.timerring.com/posts/python-cheatsheet/</guid><description/></item><item><title>Python Function Parameter</title><link>https://blog.timerring.com/posts/python-function-parameter/</link><pubDate>Sat, 21 Dec 2024 22:09:09 +0800</pubDate><guid>https://blog.timerring.com/posts/python-function-parameter/</guid><description>&lt;p>This blog will review the function parameter of Python. Mainly about the parameter passing, Keyword and Position Parameter, Anonymous Function, and unit test with &lt;code>assert&lt;/code>.&lt;/p></description></item><item><title>Python Control Structure</title><link>https://blog.timerring.com/posts/python-control-structure/</link><pubDate>Sat, 21 Dec 2024 20:26:15 +0800</pubDate><guid>https://blog.timerring.com/posts/python-control-structure/</guid><description>&lt;p>This blog will review the control structure of Python.&lt;/p></description></item><item><title>Python Composite Data Type</title><link>https://blog.timerring.com/posts/python-composite-data-type/</link><pubDate>Sat, 21 Dec 2024 19:38:25 +0800</pubDate><guid>https://blog.timerring.com/posts/python-composite-data-type/</guid><description>&lt;p>This article will review the composite data type in Python, such as &lt;code>list&lt;/code>, &lt;code>tuple&lt;/code>, &lt;code>dictionary&lt;/code>, and &lt;code>set&lt;/code>.&lt;/p></description></item><item><title>Python Basic Data Type</title><link>https://blog.timerring.com/posts/python-basic-data-type/</link><pubDate>Sat, 21 Dec 2024 16:51:57 +0800</pubDate><guid>https://blog.timerring.com/posts/python-basic-data-type/</guid><description>&lt;p>This article will explore data types and common methods for them in Python.
The content of this review is as follows: &lt;code>number type&lt;/code>, &lt;code>string type&lt;/code>, &lt;code>boolean type&lt;/code> and &lt;code>type conversion&lt;/code>.&lt;/p></description></item><item><title>Python Basic Syntax Elements</title><link>https://blog.timerring.com/posts/python-basic-syntax-elements/</link><pubDate>Fri, 20 Dec 2024 23:19:25 +0800</pubDate><guid>https://blog.timerring.com/posts/python-basic-syntax-elements/</guid><description>&lt;p>Sometimes you may forget about the basic of Python, so let us take a look at the summary of Python basic summary. The content of this review is as follows: &lt;code>data type&lt;/code>, &lt;code>variable&lt;/code>, &lt;code>control flow&lt;/code>, &lt;code>input &amp;amp; output&lt;/code>, &lt;code>PEP8 format&lt;/code>.&lt;/p></description></item></channel></rss>